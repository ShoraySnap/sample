{
  "Uuid": "096a19e1-7eea-4c51-96d0-3be85b093feb",
  "IsCustomNode": false,
  "Description": null,
  "Name": "revit-snaptrude-2019",
  "ElementResolver": {
    "ResolutionMap": {}
  },
  "Inputs": [],
  "Outputs": [],
  "Nodes": [
    {
      "ConcreteType": "Speckle.ConnectorDynamo.SendNode.Send, SpeckleConnectorDynamo",
      "AutoUpdate": true,
      "ExpiredCount": "",
      "NodeType": "ExtensionNode",
      "Id": "cd3a8d153c0247118f51d2b9e06ca6e4",
      "Inputs": [
        {
          "Id": "bdedc6db142647e9b3c69d6cc209eb5d",
          "Name": "data",
          "Description": "The data to send",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "4049266409394ba2a9d71ab3e975c85e",
          "Name": "stream",
          "Description": "The stream or streams to send to",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "f42ed32e44ca4865b1515406ace6cc68",
          "Name": "message",
          "Description": "Commit message. If left blank, one will be generated for you.",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "b04263e835d34938a5b41ad25298ad9b",
          "Name": "stream",
          "Description": "Stream or streams pointing to the created commit",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Send data to a Speckle server"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "import sys\r\nsys.path.append(\"C:\\Program Files (x86)\\IronPython 2.7\\Lib\")\r\nimport clr\r\nimport json\r\nimport os\r\nimport re\r\n\r\nclr.AddReference(\"RevitServices\")\r\nimport RevitServices\r\nfrom RevitServices.Persistence import DocumentManager\r\ndoc =  DocumentManager.Instance.CurrentDBDocument\r\n\r\nclr.AddReference(\"RevitAPIIFC\")\r\nclr.AddReference(\"RevitAPI\")\r\nfrom Autodesk.Revit.DB import *\r\nfrom Autodesk.Revit.DB.Visual import *\r\nfrom Autodesk.Revit.DB.IFC import *\r\n\r\n#Constants\r\nWALL_CATEGORY = BuiltInCategory.OST_Walls\r\nDEFAULT_COLOR = float(80)/255\r\nDIRECTSHAPE = \"Autodesk.Revit.DB.DirectShape\"\r\nFAMILYINSTANCE = \"Autodesk.Revit.DB.FamilyInstance\"\r\nFOOT_TO_MM = 304.8\r\n\r\n###### Definitions ######\r\ndef getVisibleElements(category):\r\n\t\"\"\"\r\n\tgetVisibleElements takes revit category as input and provides all visible element of that category in active view\r\n\t\"\"\"\r\n\tview = doc.ActiveView\r\n\tcategoryFilter = ElementCategoryFilter(category)\r\n\tcollector = FilteredElementCollector( doc, view.Id).WhereElementIsNotElementType().WherePasses(categoryFilter)\r\n\treturn collector.ToElements()\r\n\t\r\ndef isclose(a, b, rel_tol=1e-09, abs_tol=0.0):\r\n\t\"\"\"\r\n\tcheck if a and b are closed values \r\n\t\"\"\"\r\n\treturn abs(a-b) <= max(rel_tol * max(abs(a), abs(b)), abs_tol)\r\n\r\ndef convertUnitsTomm(value, unit):\r\n\t\"\"\"\r\n\tConverts value given in {unit} to millimeter\r\n\tFor Revit 2021 - 2022 : unit should be in UnitTypeId\r\n\tFor Lower Revit version : unit should be in DisplayUnitType\r\n\t\"\"\"\r\n\tif DisplayUnitType.DUT_DECIMAL_INCHES == unit:\r\n\t\treturn value*25.4\r\n\telif DisplayUnitType.DUT_CENTIMETERS == unit:\r\n\t\treturn value*10\r\n\telif DisplayUnitType.DUT_DECIMAL_FEET == unit:\r\n\t\treturn value*304.8\r\n\telif DisplayUnitType.DUT_MILLIMETERS == unit:\r\n\t\treturn value\r\n\telif DisplayUnitType.DUT_METERS == unit:\r\n\t\treturn value*1000\r\n\tprint unit\r\n\treturn value\r\n\t\r\ndef GetMaterialInfo(mat):\r\n\t\"\"\"\r\n\tGetMaterialInfo provides information about the material\r\n\t\"\"\"\r\n\tvalue = {}\r\n\tdef GetTextureInformation(texture_path, asset):\r\n\t\t\"\"\"\r\n\t\tGet texture information from unifiedBitMap\r\n\t\t\"\"\"\r\n\t\tvalue[\"path\"] = os.path.basename(texture_path)\r\n\t\tif asset.FindByName(\"texture_RealWorldScaleX\") and asset.FindByName(\"texture_RealWorldScaleY\"):\r\n\t\t\tunitX = asset.FindByName(\"texture_RealWorldScaleX\").DisplayUnitType\r\n\t\t\tunitY = asset.FindByName(\"texture_RealWorldScaleY\").DisplayUnitType\r\n\t\t\tuScale = asset.FindByName(\"texture_RealWorldScaleX\").Value\r\n\t\t\tvScale = asset.FindByName(\"texture_RealWorldScaleY\").Value\r\n\t\t\t\t\r\n\t\t\tvalue[\"uScale\"] = convertUnitsTomm(uScale, unitX)\r\n\t\t\tvalue[\"vScale\"] = convertUnitsTomm(vScale, unitY)\r\n\t\telse:\r\n\t\t\tif asset.FindByName(\"texture_UScale\"):\r\n\t\t\t\tvalue[\"uScale\"] = asset.FindByName(\"texture_UScale\").Value\r\n\t\t\tif asset.FindByName(\"texture_VScale\"):\r\n\t\t\t\tvalue[\"vScale\"] = asset.FindByName(\"texture_VScale\").Value\r\n\t\tif asset.FindByName(\"texture_UOffset\"):\r\n\t\t\tvalue[\"uOffset\"] = asset.FindByName(\"texture_UOffset\").Value\r\n\t\tif  asset.FindByName(\"texture_VOffset\"):\r\n\t\t\tvalue[\"vOffset\"] = asset.FindByName(\"texture_VOffset\").Value\r\n\t\tif asset.FindByName(\"texture_WAngle\"):\r\n\t\t\tvalue[\"wAng\"] = asset.FindByName(\"texture_WAngle\").Value\r\n\t\t\r\n\tdef getparameterFromAsset(asset):\r\n\t\t\"\"\"\r\n\t\tUsed for nested Asset\r\n\t\t\"\"\"\r\n\t\tfor i in range(asset.Size):\r\n\t\t\t#print getRenderingAsset.Get(i).Name\r\n\t\t\tname = asset.Get(i).Name\r\n\t\t\tif name == \"unifiedbitmap_Bitmap\":\r\n\t\t\t\ttexture_path = asset.FindByName(\"unifiedbitmap_Bitmap\").Value\r\n\t\t\t\tif texture_path:\r\n\t\t\t\t\tGetTextureInformation(texture_path, asset)\r\n\t\t\t\t\treturn value\r\n\t\r\n\tdef getGlassMaterial(renderingAsset):\r\n\t\tGLAZINGCOLOR = [\"Clear\", \"Green\", \"Gray\",\"Blue\", \"Bluegreen\", \"Bronze\", \"Custom\"]\r\n\t\tcolorMap = renderingAsset.FindByName(\"glazing_transmittance_color\").Value\r\n\t\tglassColor = GLAZINGCOLOR[colorMap]\r\n\t\t\t\t\r\n\t\tif glassColor == \"Clear\":\r\n\t\t\tvalue[\"diffuseColor\"] = [0,0,0,0.2]\r\n\t\telif glassColor == \"Green\":\r\n\t\t\tvalue[\"diffuseColor\"] = [0,1,0,0.2]\r\n\t\telif glassColor == \"Gray\":\r\n\t\t\tvalue[\"diffuseColor\"] = [0.32, 0.32, 0.32,0.2]\r\n\t\telif glassColor == \"Blue\":\r\n\t\t\tvalue[\"diffuseColor\"] = [0, 0, 1,0.2]\r\n\t\telif glassColor == \"Bluegreen\":\r\n\t\t\tvalue[\"diffuseColor\"] = [0.05,0.59,0.73,0.2]\r\n\t\telif glassColor == \"Bronze\":\r\n\t\t\tvalue[\"diffuseColor\"] = [0.8, 0.5,0.2,0.2]\r\n\t\telse:\r\n\t\t\tcolorMap = renderingAsset.FindByName(\"glazing_transmittance_map\").GetValueAsDoubles()\r\n\t\t\tvalue[\"diffuseColor\"] = [ i for i in colorMap]\r\n\t\t\tvalue[\"diffuseColor\"].append(0.2)\r\n\t\t\t#print value[\"diffuseColor\"]\r\n\t\treturn value\r\n\t\t\r\n\tdef getConsistentColor(mat):\r\n\t\t\"\"\"\r\n\t\tInCase appearanceAsset is not present or renderingAsset is empty use consistentColor\r\n\t\t\"\"\"\r\n\t\tvalue['diffuseColor'] = [float(mat.Color.Red)/255, float(mat.Color.Green)/255, float(mat.Color.Blue)/255, 1 - float(mat.Transparency)/100]\r\n\t\tvalue['name'] = mat.Id.ToString()\r\n\t\treturn value\r\n\t\t\r\n\tappearanceAssetId = mat.AppearanceAssetId\r\n\t\r\n\tassetElem = doc.GetElement(appearanceAssetId)\r\n\tif not assetElem: \r\n\t\t# return consistent color\r\n\t\tvalue = getConsistentColor(mat)\r\n\t\treturn value \r\n\t\r\n\trenderingAsset = assetElem.GetRenderingAsset()\r\n\t\r\n\tif renderingAsset.Size == 0:\r\n\t\t# return consistent color\r\n\t\tvalue = getConsistentColor(mat)\r\n\t\treturn value\r\n\t\t\r\n\tvalue[\"name\"] = assetElem.Name\r\n\t\r\n\t# localName defines class of the material i.e Glazing, Metal, Ceramic etc but it could be empty as well.\r\n\tproperty = renderingAsset.FindByName(\"localname\")\r\n\tif property:\r\n\t\tproperty = property.Value.ToString()\r\n\t\tvalue[\"type\"] = property\r\n\t\t# if material class is Glass\r\n\t\tif property == \"Glazing\":\r\n\t\t\tvalue = getGlassMaterial(renderingAsset)\r\n\t\t\treturn value\r\n\t\t\t\r\n\tfor i in range(renderingAsset.Size):\r\n\t\tname = renderingAsset.Get(i).Name\r\n\t\tif name == \"unifiedbitmap_Bitmap\":\r\n\t\t\ttexture_path = asset.FindByName(\"unifiedbitmap_Bitmap\").Value\r\n\t\t\tif texture_path:\r\n\t\t\t\tGetTextureInformation(texture_path, getRenderingAsset)\r\n\t\t\t\t\t\t\t\r\n\t\tproperty = renderingAsset.FindByName(name)\r\n\t\t# diffuse => generic, glazing => glazing class\r\n\t\tisValidProperty = re.search(\"(?=(diffuse))\",property.Name.ToString() ) or re.search(r'(?=(color))',property.Name.ToString()) or re.search(r\"(?=(glazing))\", property.Name.ToString())\r\n\t\t\t\r\n\t\t\t\t\r\n\t\tif property.NumberOfConnectedProperties > 0 and property.Name.ToString() not in [\"common_Tint_color\"] and isValidProperty:\r\n\t\t\tif isinstance(property, AssetPropertyDoubleArray4d):\r\n\t\t\t \tvalue[\"diffuseColor\"] = [ i for i in property.GetValueAsDoubles()]\r\n\t\t\t \talpha = renderingAsset.FindByName(\"generic_transparency\")\r\n\t\t\t \tif alpha and alpha.Value != 0:\r\n\t\t\t \t\tvalue[\"diffuseColor\"][3] = float(1 - alpha.Value)\r\n\t\t\t \t\t\r\n\t\t\t \tgetparameterFromAsset(property.GetAllConnectedProperties()[0])\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\telif isinstance(property, AssetPropertyDoubleArray4d) and property.Name.ToString() not in [\"common_Tint_color\"] and isValidProperty:\r\n\t\t\tvalue[\"diffuseColor\"] = [ i for i in property.GetValueAsDoubles()]\r\n\t\t\talpha = renderingAsset.FindByName(\"generic_transparency\")\r\n\t\t\tif alpha and alpha.Value != 0:\r\n\t\t\t\tvalue[\"diffuseColor\"][3] = float(1 - alpha.Value)\r\n\t\t\t\t\t\t\t\t\r\n\treturn value\r\n\t\r\n\t\r\n\t\r\ndef GetLayerMaterials(wt):\t\r\n\t\"\"\"\r\n\tGet layer information with materials from wall\r\n\t\"\"\"\r\n\tcompStr = wt.GetCompoundStructure()\r\n\tlayerMaterial = [] \r\n\tif compStr:\r\n\t\t#Get layers if compound struture is present.\r\n\t\tlayers = compStr.GetLayers()\t\r\n\t\tfor i in range(len(layers)):\r\n\t\t\tmat = doc.GetElement(layers[i].MaterialId)\r\n\t\t\t#print '*'*6, mat,'*'*6\r\n\t\t\tif mat:\r\n\t\t\t\ttry:\r\n\t\t\t\t\tvalue = GetMaterialInfo(mat)\r\n\t\t\t\texcept:\r\n\t\t\t\t\tvalue = None\r\n\t\t\t\tmaterial = {\"name\":mat.Name, \"value\":value}\r\n\t\t\telse:\r\n\t\t\t\tvalue = {}\r\n\t\t\t\tvalue['diffuseColor'] = [DEFAULT_COLOR, DEFAULT_COLOR , DEFAULT_COLOR, 1]\r\n\t\t\t\tvalue['name'] = \"default\"\r\n\t\t\t\tname = \"default\"\r\n\t\t\t\tmaterial = {\"name\":name, \"value\":value}\r\n\t\t\t\r\n\t\t\twidth = compStr.GetLayerWidth(i) * FOOT_TO_MM \r\n\t\t\t# Get layer width and it's function\r\n\t\t\tfunction = compStr.GetLayerFunction(i)\r\n\t\t\tif function == MaterialFunctionAssignment.Structure:\r\n\t\t\t\tfunction = \"Structure\"\r\n\t\t\telif function == MaterialFunctionAssignment.Substrate:\r\n\t\t\t\tfunction = \"Substrate\"\r\n\t\t\telif function == MaterialFunctionAssignment.Insulation:\r\n\t\t\t\tfunction = \"Insulation\"\r\n\t\t\telif function ==  MaterialFunctionAssignment.Finish2:\r\n\t\t\t\tfunction = \"Finish2\"\r\n\t\t\telif function ==  MaterialFunctionAssignment.Finish1:\r\n\t\t\t\tfunction = \"Finish1\"\r\n\t\t\telif function ==  MaterialFunctionAssignment.Membrane:\r\n\t\t\t\tfunction = \"Membrane\"\r\n\t\t\telse:\r\n\t\t\t\tfunction = \"Finish1\"\r\n\t\t\t\r\n\t\t\tlayerMaterial.append({ \"material\": material, \"width\": width,  \"function\":function }) \r\n\r\n\t\t\t\t\t\r\n\t\treturn layerMaterial\r\n\t\r\n\r\ndef tolist(obj1):\r\n\t\"\"\"\r\n\ttolist(Object obj1) : Returns Object [ ]\r\n\tEnsure object is a list. If a single non-iterable object given, then it will be wrapped in a list.\r\n\t\"\"\"\r\n\tif hasattr(obj1,\"__iter__\"): return obj1\r\n\telse: return [obj1]\r\n\t\r\nwalls = getVisibleElements(WALL_CATEGORY)\r\n\r\n###### Main Script ######\r\noutList = []\r\n## Get the Wall layers from compound structure\r\nwalltypes = set()\r\nfor w in walls:\r\n\t# Check if the Wall really is a Wall and not some other Element..\r\n\tif not w.GetType() == Wall:\r\n\t\t#outList.append(None)\r\n\t\tcontinue\r\n\t# Get the Walls WallType (aka FamilyType)\t\r\n\twt = w.WallType\r\n\t# If the Wall is a Basic Wall (so, not a stacked or curtain etc)...\r\n\tif wt.Kind == WallKind.Basic:\r\n\t\t# Get all the Materials in the Walls Compound Structure...\r\n\t\tname = Element.Name.GetValue(wt)\r\n\r\n\t\tif name not in walltypes:\r\n\t\t\t#print name \r\n\t\t\toutList.append({ name : GetLayerMaterials(wt)})\r\n\t\t\twalltypes.add(name)\r\n\t\t\t#print \"**\"*8\r\n\r\n\t\t# We have what we need from this wall, skip to next wall...\r\n\t\tcontinue\t\r\n\t# If the Wall is a Stacked Wall...\r\n\tif wt.Kind == WallKind.Stacked:\t\t\r\n\t\t# Stacked walls are slightly different and require us to get the SubWalls in the stack...\r\n\t\tsubWalls = [doc.GetElement(sw) for sw in w.GetStackedWallMemberIds()]\r\n\t\t# Check if there are subwalls...\r\n\t\tif not subWalls == None and len(subWalls) > 0:\t\r\n\t\t\t# Get all the Materials for each subwall (if there is any)...\t\r\n\t\t\toutList.append([GetLayerMaterials(wt.WallType) for wt in subWalls if not wt.WallType.GetCompoundStructure() == None])\r\n\t\t#else:\r\n\t\t\t#outList.append(None)\t\t\r\n    \r\nwallSideProfile = {}\r\n## Check if wall as amy elevation profile(side profile), if yes than store it in wallSideProfile\r\nfor w in walls:\r\n\tif not w.GetType() == Wall:\r\n\t\tcontinue\r\n\ttry:\r\n\t\tif ExporterIFCUtils.HasElevationProfile(w):\r\n\t\t\tpoints = []\r\n\t\t\tcurveLoop =  ExporterIFCUtils.GetElevationProfile(w)[0]\r\n\t\t\tfor cl in curveLoop.GetCurveLoopIterator():\r\n\t\t\t\tif isinstance(cl, Line):\r\n\t\t\t\t\tpoints.append([cl.GetEndPoint(0)[idx]* 304.8 for idx in range(3)])\r\n\t\t\t\telif isinstance(cl, Arc):\r\n\t\t\t\t\tarcPoints = cl.Tessellate()\r\n\t\t\t\t\tfor point in arcPoints:\r\n\t\t\t\t\t\tpoints.append([point[idx]* 304.8 for idx in range(3)])\r\n\t\t\t\r\n\t\t\twallSideProfile[w.Id.ToString()] = points\r\n\texcept Exception as e:\r\n\t\tprint e\r\n\t\tcontinue\r\n\t\t\t\r\n\t\t\t\r\nwallsInserts = {}\t\r\n## Check if wall has any curtain wall inserts in the given wall, if yes add curtain wall (mullions, panels) elementIds in wallsInserts. \r\nfor w in walls:\r\n\tif not w.GetType() == Wall:\r\n\t\tcontinue\r\n\ttry:\r\n\t\twallInsert = []\r\n\t\tinsertedWalls = w.FindInserts(False, False, True, False)\r\n\t\tcurtainWallsElements = []\r\n\t\tif len(insertedWalls) > 0:\r\n\t\t\tfor insertedWall in insertedWalls:\r\n\t\t\t\telement = doc.GetElement(insertedWall)\r\n\t\t\t\tcurtainWallElements = []\r\n\t\t\t\tif element.Category.Name == \"Walls\":\r\n\t\t\t\t\tgrid = element.CurtainGrid\r\n\t\t\t\t\tif grid:\r\n\t\t\t\t\t\tmullions = [grid.GetMullionIds()[i].ToString() for i in range(len(grid.GetMullionIds()))]\r\n\t\t\t\t\t\tpanels = [grid.GetPanelIds()[i].ToString() for i in range(len(grid.GetPanelIds()))]\r\n\t\t\t\t\t\tcurtainWallElements = mullions + panels\r\n\t\t\t\t\t\tcurtainWallsElements.append(curtainWallElements)\r\n\t\t\t\t\t\t\r\n\t\t\tif len(curtainWallsElements) > 0:\r\n\t\t\t\twallsInserts[w.Id.ToString()] = curtainWallsElements\r\n\t\t\t\t\t\t\r\n\texcept Exception as e:\r\n\t\tprint e\r\n# Return the results to the Dynamo Workspace...\r\noutList = json.dumps(outList, False, False), json.dumps(wallSideProfile, False,False), json.dumps(wallsInserts, False, False)\r\nOUT = outList",
      "VariableInputPorts": true,
      "Id": "1729f3d97f284a0db2b54ffa04bea4f6",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "a7031732f2574aef8846ba620c2b3776",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Load the Python Standard and DesignScript Libraries\r\nimport sys\r\nsys.path.append(\"C:\\Program Files (x86)\\IronPython 2.7\\Lib\")\r\n# Load the Python Standard and DesignScript Libraries\r\nimport sys\r\nimport clr\r\nimport json\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\n\r\nclr.AddReference(\"RevitAPIIFC\")\r\nclr.AddReference(\"RevitAPI\")\r\nfrom Autodesk.Revit.DB import *\r\nfrom Autodesk.Revit.DB.Visual import *\r\nfrom Autodesk.Revit.DB.IFC import *\r\n\r\nclr.AddReference('RevitServices')\r\nimport RevitServices\r\nfrom RevitServices.Persistence import DocumentManager\r\nfrom RevitServices.Transactions import TransactionManager\r\nfrom System.Collections.Generic import Dictionary\r\n\r\ndoc = DocumentManager.Instance.CurrentDBDocument\r\nview = doc.ActiveView\r\n# The inputs to this node will be stored as a list in the IN variables.\r\n\r\nITEM_LIMIT = 150\r\n\r\nCATEGORY = [BuiltInCategory.OST_Levels, BuiltInCategory.OST_Walls]\r\n\r\ndef getVisibleElements(category):\r\n\tview = doc.ActiveView\r\n\tcategoryFilter = ElementCategoryFilter(category)\r\n\tcollector = FilteredElementCollector( doc, view.Id).WhereElementIsNotElementType().WherePasses(categoryFilter)\r\n\treturn collector.ToElements()\r\n\r\n\t\r\ndef tolist(obj):\r\n\tif hasattr(obj,\"__iter__\"):return obj\r\n\telse:\r\n\t\treturn [obj]\r\n\t\r\n# get Elements present\r\nlevels = FilteredElementCollector(doc).OfCategory(CATEGORY[0]).WhereElementIsNotElementType().ToElements()\r\nwalls = getVisibleElements(CATEGORY[1] )\r\n\r\nelementsList = [levels, walls ] \r\ndebug = []\r\nnames = {0:\"levels\", 1:\"walls\" }\r\ndata = {}\r\noutlist = []\r\nlevels = []\r\nlevelsName = []\r\n\r\nkeys = []\r\nopt = Options()\r\n\t\t\t\t\r\n# get map of names and element\r\nfor i in range(0,len(elementsList)):\r\n\tnum = 1\r\n \tkey = names[i] + \"-\" +str(num)\r\n \tif i == 0:\r\n \t\tfor ele in range(0,len(elementsList[i])):\r\n \t\t\telement = elementsList[i][ele]\r\n\t\t\tname = element.Name.ToString()\r\n\t\t\teId = element.Id.ToString()\r\n\t\t\tif name in levelsName:\r\n\t\t\t\tcontinue\r\n\t\t\telse:\r\n\t\t\t\tlevelsName.append(name)\r\n\t\t\theight = element.ProjectElevation * 304.8\r\n\t\t\tlevels.append({ \"elevation\": height, \"elementId\": eId, \"name\": name})\r\n \telse:\r\n\t\tfor element in range(0,len(elementsList[i]), ITEM_LIMIT):\r\n\t\t\tdata[key] = []\r\n\t\t\tstart = element\r\n\t\t\tend = element + ITEM_LIMIT if element + ITEM_LIMIT < len(elementsList[i]) else len(elementsList[i])\t\r\n\t\t\tfor elem in range(start, end):\r\n\t\t\t\tif elementsList[i][elem].GetType().ToString() == \"Autodesk.Revit.DB.DirectShape\":\r\n\t\t\t\t\tcontinue\r\n\t\t\t\tdata[key].append(elementsList[i][elem])\r\n\t\t\tkeys.append(key)\r\n\t\t\tnum += 1\r\n\t\t\tkey =  names[i] + \"-\" +str(num)\r\n\r\n\t\t\t\r\n\r\nfor key, value in data.items():\r\n\t#print key, len(data[key])\r\n\td = Dictionary[str, object]({key:value})\r\n\toutlist.append(d)\r\n\t\r\nlevelsData = json.dumps(levels, False, False)\r\n\t\r\n\r\n# Assign your output to the OUT variable.\r\nOUT =  outlist, levelsData",
      "VariableInputPorts": true,
      "Id": "d1292d758bcb489fabe494a6610d081a",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "cb2dcf9f9d694e1cbb3603c09249e7ae",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Load the Python Standard and DesignScript Libraries\r\nimport sys\r\nimport clr\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\nfrom System.Collections.Generic import Dictionary\r\n\r\n# The inputs to this node will be stored as a list in the IN variables.\r\nwalltypeData = IN[0][0]\r\nwallSideProfile = IN[0][1]\r\nwallInsertsData = IN[0][2]\r\nfloortypeData = IN[1]\r\nceilingtypeData = IN[2][0]\r\nceilingData = IN[2][1]\r\ncolumntypeData = IN[3]\r\ndoortypeData = IN[4][0]\r\ndoorsWallMap = IN[4][1]\r\nwindowtypeData = IN[5][0]\r\nwindowsWallMap = IN[5][1]\r\ncomponentsData = IN[6][0]\r\nlevels = IN[6][1]\r\n\r\n\r\n\r\nrevitExportKeys = IN[7][0]\r\nrevitExportData = IN[7][1][0]\r\nrevitExportFamilyData = IN[7][1][1]\r\nrevitExportComponentsData = IN[7][1][2]\r\n\r\n\r\n# Place your code below this line\r\n#data = componentsData\r\n\r\nlist = [levels, walltypeData,wallSideProfile, wallInsertsData, floortypeData, columntypeData, ceilingtypeData,ceilingData, windowtypeData, windowsWallMap, doortypeData, doorsWallMap]\r\n\r\nNAMES = [\"levels\", \"wallTypes\",\"wallSideProfile\",\"wallInsertsData\", \"floorTypes\", \"columnTypes\",\"ceilingTypes\",\"ceilings\",\"windowTypes\",\"windowsWallMap\",\"doorTypes\",\"doorsWallMap\" ]\r\n\r\nfor idx in range(len(revitExportData)):\r\n\tif len(revitExportData[idx]) == 2: # i.e. \"{}\"\r\n\t\tcontinue\r\n\tNAMES.append(revitExportKeys[idx])\r\n\tlist.append(revitExportData[idx])\r\n\r\nfor idx in range(len(revitExportFamilyData)):\r\n\tif len(revitExportFamilyData[idx]) == 2: # i.e. \"{}\"\r\n\t\tcontinue\r\n\tNAMES.append(revitExportKeys[idx]+\"*FamilyData\")\r\n\tlist.append(revitExportFamilyData[idx])\r\n\t\r\nfor idx in range(len(revitExportComponentsData)):\r\n\tif len(revitExportComponentsData[idx]) == 2: # i.e. \"{}\"\r\n\t\tcontinue\r\n\tNAMES.append(revitExportKeys[idx]+\"*ComponentsData\")\r\n\tlist.append(revitExportComponentsData[idx])\r\n\r\noutlist = componentsData\r\n\r\n# divide data to so that it will be less than 10000000\r\nfor idx in range(len(list)):\r\n\t#d = Dictionary[str, object]({NAMES[idx] : list[idx]})\r\n\t#outlist.append(d)\r\n\tcount = 1\r\n\tfor elem in range(0,len(list[idx]),8000000):\r\n\t\tstart = elem\r\n\t\tend = elem + 8000000 if len(list[idx]) > elem + 8000000 else len(list[idx])\r\n\t\tname = NAMES[idx]+ \"-\" + str(count)\r\n\t\td = Dictionary[str, object]({name : list[idx][start:end]})\r\n\t\tcount += 1\r\n\t\toutlist.append(d)\r\n\t\t\r\n\t\r\nOUT = outlist ",
      "VariableInputPorts": true,
      "Id": "ba4b121ae0e344e294fbf34704abc82d",
      "Inputs": [
        {
          "Id": "0f88859a66ec49918324b7de5fe24124",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "433ee99011f643be9f1ed6aa8bb73fb4",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "34c1310901e947eab309ee0d9ceec10e",
          "Name": "IN[2]",
          "Description": "Input #2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "0dd7625158e84279a5ea380344f47756",
          "Name": "IN[3]",
          "Description": "Input #3",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "a3769d8fed0f4c6eb059004312ab48b7",
          "Name": "IN[4]",
          "Description": "Input #4",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "d90d660e970b49e78f8f130d9d9a6cfc",
          "Name": "IN[5]",
          "Description": "Input #5",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "fe988dbda3414f82821b524dd86670ea",
          "Name": "IN[6]",
          "Description": "Input #6",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "f7d2fc7a6f434d15ad5e0803c275c0e9",
          "Name": "IN[7]",
          "Description": "Input #7",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "3111a6c16c9b4947981cd6a14bd92425",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "##### Imports ######\r\nimport sys\r\nsys.path.append(\"C:\\Program Files (x86)\\IronPython 2.7\\Lib\")\r\nimport clr\r\nimport os\r\nimport json\r\nimport re\r\n\r\nclr.AddReference(\"RevitServices\")\r\nimport RevitServices\r\nfrom RevitServices.Persistence import DocumentManager\r\ndoc =  DocumentManager.Instance.CurrentDBDocument\r\n\r\nclr.AddReference(\"RevitAPI\")\r\nfrom Autodesk.Revit.DB import *\r\nfrom Autodesk.Revit.DB.Visual import *\r\n\r\n\r\n\r\nCOLUMN_CATEGORY = BuiltInCategory.OST_Columns\r\nDEFAULT_COLOR = float(80)/255\r\nFOOT_TO_MM = 304.8\r\n###### Definitions ######\r\ndef getVisibleElements(category):\r\n\t\"\"\"\r\n\tgetVisibleElements takes revit category as input and provides all visible element of that category in active view\r\n\t\"\"\"\r\n\tview = doc.ActiveView\r\n\tcategoryFilter = ElementCategoryFilter(category)\r\n\tcollector = FilteredElementCollector( doc, view.Id).WhereElementIsNotElementType().WherePasses(categoryFilter)\r\n\treturn collector.ToElements()\r\n\r\ndef isclose(a, b, rel_tol=1e-09, abs_tol=0.0):\r\n\t\"\"\"\r\n\tcheck if a and b are closed values \r\n\t\"\"\"\r\n\treturn abs(a-b) <= max(rel_tol * max(abs(a), abs(b)), abs_tol)\r\n\r\ndef convertUnitsTomm(value, unit):\r\n\t\"\"\"\r\n\tConverts value given in {unit} to millimeter\r\n\tFor Revit 2021 - 2022 : unit should be in UnitTypeId\r\n\tFor Lower Revit version : unit should be in DisplayUnitType\r\n\t\"\"\"\r\n\tif DisplayUnitType.DUT_DECIMAL_INCHES == unit:\r\n\t\treturn value*25.4\r\n\telif DisplayUnitType.DUT_CENTIMETERS == unit:\r\n\t\treturn value*10\r\n\telif DisplayUnitType.DUT_DECIMAL_FEET == unit:\r\n\t\treturn value*304.8\r\n\telif DisplayUnitType.DUT_MILLIMETERS == unit:\r\n\t\treturn value\r\n\telif DisplayUnitType.DUT_METERS == unit:\r\n\t\treturn value*1000\r\n\tprint unit\r\n\treturn value\r\n\t\r\ndef GetMaterialInfo(mat):\r\n\t\"\"\"\r\n\tGetMaterialInfo provides information about the material\r\n\t\"\"\"\r\n\tvalue = {}\r\n\tdef GetTextureInformation(texture_path, asset):\r\n\t\t\"\"\"\r\n\t\tGet texture information from unifiedBitMap\r\n\t\t\"\"\"\r\n\t\tvalue[\"path\"] = os.path.basename(texture_path)\r\n\t\tif asset.FindByName(\"texture_RealWorldScaleX\") and asset.FindByName(\"texture_RealWorldScaleY\"):\r\n\t\t\tunitX = asset.FindByName(\"texture_RealWorldScaleX\").DisplayUnitType\r\n\t\t\tunitY = asset.FindByName(\"texture_RealWorldScaleY\").DisplayUnitType\r\n\t\t\tuScale = asset.FindByName(\"texture_RealWorldScaleX\").Value\r\n\t\t\tvScale = asset.FindByName(\"texture_RealWorldScaleY\").Value\r\n\t\t\t\t#print uScale, uScale, unitX.TypeId\r\n\t\t\tvalue[\"uScale\"] = convertUnitsTomm(uScale, unitX)\r\n\t\t\tvalue[\"vScale\"] = convertUnitsTomm(vScale, unitY)\r\n\t\telse:\r\n\t\t\tif asset.FindByName(\"texture_UScale\"):\r\n\t\t\t\tvalue[\"uScale\"] = asset.FindByName(\"texture_UScale\").Value\r\n\t\t\tif asset.FindByName(\"texture_VScale\"):\r\n\t\t\t\tvalue[\"vScale\"] = asset.FindByName(\"texture_VScale\").Value\r\n\t\tif asset.FindByName(\"texture_UOffset\"):\r\n\t\t\tvalue[\"uOffset\"] = asset.FindByName(\"texture_UOffset\").Value\r\n\t\tif  asset.FindByName(\"texture_VOffset\"):\r\n\t\t\tvalue[\"vOffset\"] = asset.FindByName(\"texture_VOffset\").Value\r\n\t\tif asset.FindByName(\"texture_WAngle\"):\r\n\t\t\tvalue[\"wAng\"] = asset.FindByName(\"texture_WAngle\").Value\r\n\t\t\r\n\tdef getparameterFromAsset(asset):\r\n\t\t\"\"\"\r\n\t\tUsed for nested Asset\r\n\t\t\"\"\"\r\n\t\tfor i in range(asset.Size):\r\n\t\t\t#print getRenderingAsset.Get(i).Name\r\n\t\t\tname = asset.Get(i).Name\r\n\t\t\tif name == \"unifiedbitmap_Bitmap\":\r\n\t\t\t\ttexture_path = asset.FindByName(\"unifiedbitmap_Bitmap\").Value\r\n\t\t\t\tif texture_path:\r\n\t\t\t\t\tGetTextureInformation(texture_path, asset)\r\n\t\t\t\t\treturn value\r\n\t\r\n\tdef getGlassMaterial(renderingAsset):\r\n\t\tGLAZINGCOLOR = [\"Clear\", \"Green\", \"Gray\",\"Blue\", \"Bluegreen\", \"Bronze\", \"Custom\"]\r\n\t\tcolorMap = renderingAsset.FindByName(\"glazing_transmittance_color\").Value\r\n\t\tglassColor = GLAZINGCOLOR[colorMap]\r\n\t\t\t\t\r\n\t\tif glassColor == \"Clear\":\r\n\t\t\tvalue[\"diffuseColor\"] = [0,0,0,0.2]\r\n\t\telif glassColor == \"Green\":\r\n\t\t\tvalue[\"diffuseColor\"] = [0,1,0,0.2]\r\n\t\telif glassColor == \"Gray\":\r\n\t\t\tvalue[\"diffuseColor\"] = [0.32, 0.32, 0.32,0.2]\r\n\t\telif glassColor == \"Blue\":\r\n\t\t\tvalue[\"diffuseColor\"] = [0, 0, 1,0.2]\r\n\t\telif glassColor == \"Bluegreen\":\r\n\t\t\tvalue[\"diffuseColor\"] = [0.05,0.59,0.73,0.2]\r\n\t\telif glassColor == \"Bronze\":\r\n\t\t\tvalue[\"diffuseColor\"] = [0.8, 0.5,0.2,0.2]\r\n\t\telse:\r\n\t\t\tcolorMap = renderingAsset.FindByName(\"glazing_transmittance_map\").GetValueAsDoubles()\r\n\t\t\tvalue[\"diffuseColor\"] = [ i for i in colorMap]\r\n\t\t\tvalue[\"diffuseColor\"].append(0.2)\r\n\t\t\t#print value[\"diffuseColor\"]\r\n\t\treturn value\r\n\t\t\r\n\tdef getConsistentColor(mat):\r\n\t\t\"\"\"\r\n\t\tInCase appearanceAsset is not present or renderingAsset is empty use consistentColor\r\n\t\t\"\"\"\r\n\t\tvalue['diffuseColor'] = [float(mat.Color.Red)/255, float(mat.Color.Green)/255, float(mat.Color.Blue)/255, 1 - float(mat.Transparency)/100]\r\n\t\tvalue['name'] = mat.Id.ToString()\r\n\t\treturn value\r\n\t\t\r\n\tappearanceAssetId = mat.AppearanceAssetId\r\n\t\r\n\tassetElem = doc.GetElement(appearanceAssetId)\r\n\tif not assetElem: \r\n\t\t# return consistent color\r\n\t\tvalue = getConsistentColor(mat)\r\n\t\treturn value \r\n\t\r\n\trenderingAsset = assetElem.GetRenderingAsset()\r\n\t\r\n\tif renderingAsset.Size == 0:\r\n\t\t# return consistent color\r\n\t\tvalue = getConsistentColor(mat)\r\n\t\treturn value\r\n\t\t\r\n\tvalue[\"name\"] = assetElem.Name\r\n\t\r\n\t# localName defines class of the material i.e Glazing, Metal, Ceramic etc but it could be empty as well.\r\n\tproperty = renderingAsset.FindByName(\"localname\")\r\n\tif property:\r\n\t\tproperty = property.Value.ToString()\r\n\t\tvalue[\"type\"] = property\r\n\t\t# if material class is Glass\r\n\t\tif property == \"Glazing\":\r\n\t\t\tvalue = getGlassMaterial(renderingAsset)\r\n\t\t\treturn value\r\n\t\t\t\r\n\tfor i in range(renderingAsset.Size):\r\n\t\tname = renderingAsset.Get(i).Name\r\n\t\tif name == \"unifiedbitmap_Bitmap\":\r\n\t\t\ttexture_path = asset.FindByName(\"unifiedbitmap_Bitmap\").Value\r\n\t\t\tif texture_path:\r\n\t\t\t\tGetTextureInformation(texture_path, getRenderingAsset)\r\n\t\t\t\t\t\t\t\r\n\t\tproperty = renderingAsset.FindByName(name)\r\n\t\t# diffuse => generic, glazing => glazing class\r\n\t\tisValidProperty = re.search(\"(?=(diffuse))\",property.Name.ToString() ) or re.search(r'(?=(color))',property.Name.ToString()) or re.search(r\"(?=(glazing))\", property.Name.ToString())\r\n\t\t\t\r\n\t\t\t\t\r\n\t\tif property.NumberOfConnectedProperties > 0 and property.Name.ToString() not in [\"common_Tint_color\"] and isValidProperty:\r\n\t\t\tif isinstance(property, AssetPropertyDoubleArray4d):\r\n\t\t\t \tvalue[\"diffuseColor\"] = [ i for i in property.GetValueAsDoubles()]\r\n\t\t\t \talpha = renderingAsset.FindByName(\"generic_transparency\")\r\n\t\t\t \tif alpha and alpha.Value != 0:\r\n\t\t\t \t\tvalue[\"diffuseColor\"][3] = float(1 - alpha.Value)\r\n\t\t\t \tgetparameterFromAsset(property.GetAllConnectedProperties()[0])\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\telif isinstance(property, AssetPropertyDoubleArray4d) and property.Name.ToString() not in [\"common_Tint_color\"] and isValidProperty:\r\n\t\t\tvalue[\"diffuseColor\"] = [ i for i in property.GetValueAsDoubles()]\r\n\t\t\talpha = renderingAsset.FindByName(\"generic_transparency\")\r\n\t\t\tif alpha and alpha.Value != 0:\r\n\t\t\t\tvalue[\"diffuseColor\"][3] = float(1 - alpha.Value)\r\n\t\t\t\t\t\t\t\t\r\n\treturn value\r\n\t\r\n\t\r\n\t\r\ndef GetLayerMaterials(wt):\t\r\n\t\"\"\"\r\n\tGet layer information with materials from column\r\n\t\"\"\"\r\n\tcompStr = wt.GetCompoundStructure()\r\n\tlayerMaterial = [] \r\n\tif compStr:\r\n\t\t#Get layers if compound struture is present.\r\n\t\tlayers = compStr.GetLayers()\t\r\n\t\tfor i in range(len(layers)):\r\n\t\t\tmat = doc.GetElement(layers[i].MaterialId)\r\n\t\t\tif mat:\r\n\t\t\t\ttry:\r\n\t\t\t\t\tvalue = GetMaterialInfo(mat)\r\n\t\t\t\texcept:\r\n\t\t\t\t\tvalue = None\r\n\t\t\t\tmaterial = {\"name\":mat.Name, \"value\":value}\r\n\t\t\telse:\r\n\t\t\t\tvalue = {}\r\n\t\t\t\tvalue['diffuseColor'] = [DEFAULT_COLOR, DEFAULT_COLOR , DEFAULT_COLOR, 1]\r\n\t\t\t\tvalue['name'] = \"default\"\r\n\t\t\t\tname = \"default\"\r\n\t\t\t\tmaterial = {\"name\":name, \"value\":value}\r\n\t\t\t\r\n\t\t\twidth = compStr.GetLayerWidth(i) * FOOT_TO_MM\r\n\t\t\t# Get layer width and it's function\r\n\t\t\tfunction = compStr.GetLayerFunction(i)\r\n\t\t\tif function == MaterialFunctionAssignment.Structure:\r\n\t\t\t\tfunction = \"Structure\"\r\n\t\t\telif function == MaterialFunctionAssignment.Substrate:\r\n\t\t\t\tfunction = \"Substrate\"\r\n\t\t\telif function == MaterialFunctionAssignment.Insulation:\r\n\t\t\t\tfunction = \"Insulation\"\r\n\t\t\telif function ==  MaterialFunctionAssignment.Finish2:\r\n\t\t\t\tfunction = \"Finish2\"\r\n\t\t\telif function ==  MaterialFunctionAssignment.Finish1:\r\n\t\t\t\tfunction = \"Finish1\"\r\n\t\t\telif function ==  MaterialFunctionAssignment.Membrane:\r\n\t\t\t\tfunction = \"Membrane\"\r\n\t\t\telse:\r\n\t\t\t\tfunction = \"Finish1\"\r\n\t\t\t\r\n\t\t\tlayerMaterial.append({ \"material\": material, \"width\": width,  \"function\":function }) \r\n\r\n\t\t\t\t\t\r\n\t\treturn layerMaterial\r\n\t\r\n\r\ndef tolist(obj1):\r\n\t\"\"\"\r\n\ttolist(Object obj1) : Returns Object [ ]\r\n\tEnsure object is a list. If a single non-iterable object given, then it will be wrapped in a list.\r\n\t\"\"\"\r\n\tif hasattr(obj1,\"__iter__\"): return obj1\r\n\telse: return [obj1]\r\n\r\n###### Main Script ######\r\ncolumns = getVisibleElements(COLUMN_CATEGORY)\r\noutList = []\r\nmatList = {}\r\nmatMap = []\r\n# Get layer and material information from the columns\r\nfor column in columns:\r\n\t#print w.Category.Name == \"Columns\" # columns\r\n\tcolumnId = column.Id.IntegerValue.ToString()\r\n\t\r\n\tif column.Category.Name == \"Columns\":\r\n\t\tmat = None\r\n\t\t# get All material Ids associated with column\r\n\t\tmats = column.GetMaterialIds(False)\r\n\t\tif len(mats) > 0:\r\n\t\t\tmat = doc.GetElement(mats[0])\r\n\t\tif mat:\r\n\t\t\tif column.Name not in matList:\r\n\t\t\t\t#print column.Name.ToString()\r\n\t\t\t\ttry:\r\n\t\t\t\t\tvalue = GetMaterialInfo(mat)\r\n\t\t\t\texcept:\r\n\t\t\t\t\tvalue = None\r\n\t\t\t\t#print typemat, value\r\n\t\t\t\tmatList[column.Name] = { \"value\":value}\r\n\t\t\t\tmatMap.append({column.Name: matList[column.Name]})\r\n\t\t\r\n\t\r\noutList = json.dumps(matMap, False, False)\r\n\r\n\r\nOUT = outList",
      "VariableInputPorts": true,
      "Id": "6a127115ea7045d68e1e1f59c52fb6b3",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "dbb7af273f7f410c95993996789a83bb",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "###### Imports ######\r\n\r\nimport sys\r\nsys.path.append(\"C:\\Program Files (x86)\\IronPython 2.7\\Lib\")\r\nimport clr\r\nimport json\r\nimport os\r\nimport re\r\n\r\nclr.AddReference(\"RevitServices\")\r\nimport RevitServices\r\nfrom RevitServices.Persistence import DocumentManager\r\ndoc =  DocumentManager.Instance.CurrentDBDocument\r\n\r\nclr.AddReference(\"RevitAPI\")\r\nfrom Autodesk.Revit.DB import *\r\nfrom Autodesk.Revit.DB.Visual import *\r\n\r\n##Constants\r\nDEFAULT_COLOR = float(80)/255\r\nFLOOR_CATEGORY = BuiltInCategory.OST_Floors\r\nFOOT_TO_MM = 304.8\r\n\r\n###### Definitions ######\r\ndef getVisibleElements(category):\r\n\t\"\"\"\r\n\tgetVisibleElements takes revit category as input and provides all visible element of that category in active view\r\n\t\"\"\"\r\n\tview = doc.ActiveView\r\n\tcategoryFilter = ElementCategoryFilter(category)\r\n\tcollector = FilteredElementCollector( doc, view.Id).WhereElementIsNotElementType().WherePasses(categoryFilter)\r\n\treturn collector.ToElements()\r\n\r\ndef isclose(a, b, rel_tol=1e-09, abs_tol=0.0):\r\n\t\"\"\"\r\n\tcheck if a and b are closed values \r\n\t\"\"\"\r\n\treturn abs(a-b) <= max(rel_tol * max(abs(a), abs(b)), abs_tol)\r\n\r\ndef convertUnitsTomm(value, unit):\r\n\t\"\"\"\r\n\tConverts value given in {unit} to millimeter\r\n\tFor Revit 2021 - 2022 : unit should be in UnitTypeId\r\n\tFor Lower Revit version : unit should be in DisplayUnitType\r\n\t\"\"\"\r\n\tif DisplayUnitType.DUT_DECIMAL_INCHES == unit:\r\n\t\treturn value*25.4\r\n\telif DisplayUnitType.DUT_CENTIMETERS == unit:\r\n\t\treturn value*10\r\n\telif DisplayUnitType.DUT_DECIMAL_FEET == unit:\r\n\t\treturn value*304.8\r\n\telif DisplayUnitType.DUT_MILLIMETERS == unit:\r\n\t\treturn value\r\n\telif DisplayUnitType.DUT_METERS == unit:\r\n\t\treturn value*1000\r\n\tprint unit\r\n\treturn value\r\n\t\r\ndef GetMaterialInfo(mat):\r\n\t\"\"\"\r\n\tGetMaterialInfo provides information about the material\r\n\t\"\"\"\r\n\tvalue = {}\r\n\tdef GetTextureInformation(texture_path, asset):\r\n\t\t\"\"\"\r\n\t\tGet texture information from unifiedBitMap\r\n\t\t\"\"\"\r\n\t\tvalue[\"path\"] = os.path.basename(texture_path)\r\n\t\tif asset.FindByName(\"texture_RealWorldScaleX\") and asset.FindByName(\"texture_RealWorldScaleY\"):\r\n\t\t\tunitX = asset.FindByName(\"texture_RealWorldScaleX\").DisplayUnitType\r\n\t\t\tunitY = asset.FindByName(\"texture_RealWorldScaleY\").DisplayUnitType\r\n\t\t\tuScale = asset.FindByName(\"texture_RealWorldScaleX\").Value\r\n\t\t\tvScale = asset.FindByName(\"texture_RealWorldScaleY\").Value\r\n\t\t\t\t#print uScale, uScale, unitX.TypeId\r\n\t\t\tvalue[\"uScale\"] = convertUnitsTomm(uScale, unitX)\r\n\t\t\tvalue[\"vScale\"] = convertUnitsTomm(vScale, unitY)\r\n\t\telse:\r\n\t\t\tif asset.FindByName(\"texture_UScale\"):\r\n\t\t\t\tvalue[\"uScale\"] = asset.FindByName(\"texture_UScale\").Value\r\n\t\t\tif asset.FindByName(\"texture_VScale\"):\r\n\t\t\t\tvalue[\"vScale\"] = asset.FindByName(\"texture_VScale\").Value\r\n\t\tif asset.FindByName(\"texture_UOffset\"):\r\n\t\t\tvalue[\"uOffset\"] = asset.FindByName(\"texture_UOffset\").Value\r\n\t\tif  asset.FindByName(\"texture_VOffset\"):\r\n\t\t\tvalue[\"vOffset\"] = asset.FindByName(\"texture_VOffset\").Value\r\n\t\tif asset.FindByName(\"texture_WAngle\"):\r\n\t\t\tvalue[\"wAng\"] = asset.FindByName(\"texture_WAngle\").Value\r\n\t\t\r\n\tdef getparameterFromAsset(asset):\r\n\t\t\"\"\"\r\n\t\tUsed for nested Asset\r\n\t\t\"\"\"\r\n\t\tfor i in range(asset.Size):\r\n\t\t\t#print getRenderingAsset.Get(i).Name\r\n\t\t\tname = asset.Get(i).Name\r\n\t\t\tif name == \"unifiedbitmap_Bitmap\":\r\n\t\t\t\ttexture_path = asset.FindByName(\"unifiedbitmap_Bitmap\").Value\r\n\t\t\t\tif texture_path:\r\n\t\t\t\t\tGetTextureInformation(texture_path, asset)\r\n\t\t\t\t\treturn value\r\n\t\r\n\tdef getGlassMaterial(renderingAsset):\r\n\t\tGLAZINGCOLOR = [\"Clear\", \"Green\", \"Gray\",\"Blue\", \"Bluegreen\", \"Bronze\", \"Custom\"]\r\n\t\tcolorMap = renderingAsset.FindByName(\"glazing_transmittance_color\").Value\r\n\t\tglassColor = GLAZINGCOLOR[colorMap]\r\n\t\t\t\t\r\n\t\tif glassColor == \"Clear\":\r\n\t\t\tvalue[\"diffuseColor\"] = [0,0,0,0.2]\r\n\t\telif glassColor == \"Green\":\r\n\t\t\tvalue[\"diffuseColor\"] = [0,1,0,0.2]\r\n\t\telif glassColor == \"Gray\":\r\n\t\t\tvalue[\"diffuseColor\"] = [0.32, 0.32, 0.32,0.2]\r\n\t\telif glassColor == \"Blue\":\r\n\t\t\tvalue[\"diffuseColor\"] = [0, 0, 1,0.2]\r\n\t\telif glassColor == \"Bluegreen\":\r\n\t\t\tvalue[\"diffuseColor\"] = [0.05,0.59,0.73,0.2]\r\n\t\telif glassColor == \"Bronze\":\r\n\t\t\tvalue[\"diffuseColor\"] = [0.8, 0.5,0.2,0.2]\r\n\t\telse:\r\n\t\t\tcolorMap = renderingAsset.FindByName(\"glazing_transmittance_map\").GetValueAsDoubles()\r\n\t\t\tvalue[\"diffuseColor\"] = [ i for i in colorMap]\r\n\t\t\tvalue[\"diffuseColor\"].append(0.2)\r\n\t\t\t\r\n\t\treturn value\r\n\t\t\r\n\tdef getConsistentColor(mat):\r\n\t\t\"\"\"\r\n\t\tInCase appearanceAsset is not present or renderingAsset is empty use consistentColor\r\n\t\t\"\"\"\r\n\t\tvalue['diffuseColor'] = [float(mat.Color.Red)/255, float(mat.Color.Green)/255, float(mat.Color.Blue)/255, 1 - float(mat.Transparency)/100]\r\n\t\tvalue['name'] = mat.Id.ToString()\r\n\t\treturn value\r\n\t\t\r\n\tappearanceAssetId = mat.AppearanceAssetId\r\n\t\r\n\tassetElem = doc.GetElement(appearanceAssetId)\r\n\tif not assetElem: \r\n\t\t# return consistent color\r\n\t\tvalue = getConsistentColor(mat)\r\n\t\treturn value \r\n\t\r\n\trenderingAsset = assetElem.GetRenderingAsset()\r\n\t\r\n\tif renderingAsset.Size == 0:\r\n\t\t# return consistent color\r\n\t\tvalue = getConsistentColor(mat)\r\n\t\treturn value\r\n\t\t\r\n\tvalue[\"name\"] = assetElem.Name\r\n\t\r\n\t# localName defines class of the material i.e Glazing, Metal, Ceramic etc but it could be empty as well.\r\n\tproperty = renderingAsset.FindByName(\"localname\")\r\n\tif property:\r\n\t\tproperty = property.Value.ToString()\r\n\t\tvalue[\"type\"] = property\r\n\t\t# if material class is Glass\r\n\t\tif property == \"Glazing\":\r\n\t\t\tvalue = getGlassMaterial(renderingAsset)\r\n\t\t\treturn value\r\n\t\t\t\r\n\tfor i in range(renderingAsset.Size):\r\n\t\tname = renderingAsset.Get(i).Name\r\n\t\tif name == \"unifiedbitmap_Bitmap\":\r\n\t\t\ttexture_path = asset.FindByName(\"unifiedbitmap_Bitmap\").Value\r\n\t\t\tif texture_path:\r\n\t\t\t\tGetTextureInformation(texture_path, getRenderingAsset)\r\n\t\t\t\t\t\t\t\r\n\t\tproperty = renderingAsset.FindByName(name)\r\n\t\t# diffuse => generic, glazing => glazing class\r\n\t\tisValidProperty = re.search(\"(?=(diffuse))\",property.Name.ToString() ) or re.search(r'(?=(color))',property.Name.ToString()) or re.search(r\"(?=(glazing))\", property.Name.ToString())\r\n\t\t\t\r\n\r\n\t\tif property.NumberOfConnectedProperties > 0 and property.Name.ToString() not in [\"common_Tint_color\"] and isValidProperty:\r\n\t\t\r\n\t\t\tif isinstance(property, AssetPropertyDoubleArray4d):\r\n\t\t\t \tvalue[\"diffuseColor\"] = [ i for i in property.GetValueAsDoubles()]\r\n\t\t\t \talpha = renderingAsset.FindByName(\"generic_transparency\")\r\n\t\t\t \tif alpha and alpha.Value != 0:\r\n\t\t\t \t\tvalue[\"diffuseColor\"][3] = float(1 - alpha.Value)\r\n\t\t\t \r\n\t\t\t \r\n\t\t\tgetparameterFromAsset(property.GetAllConnectedProperties()[0])\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\telif isinstance(property, AssetPropertyDoubleArray4d) and property.Name.ToString() not in [\"common_Tint_color\"] and isValidProperty:\r\n\t\t\tvalue[\"diffuseColor\"] = [ i for i in property.GetValueAsDoubles()]\r\n\t\t\talpha = renderingAsset.FindByName(\"generic_transparency\")\r\n\t\t\tif alpha and alpha.Value != 0:\r\n\t\t\t\tvalue[\"diffuseColor\"][3] = float(1 - alpha.Value)\r\n\t\t\t\t\t\t\t\t\r\n\treturn value\r\n\t\r\n\t\r\n\t\r\ndef GetLayerMaterials(wt):\t\r\n\t\"\"\"\r\n\tGet layer information with materials from floor\r\n\t\"\"\"\r\n\tcompStr = wt.GetCompoundStructure()\r\n\tlayerMaterial = [] \r\n\tif compStr:\r\n\t\t#Get layers if compound struture is present.\r\n\t\tlayers = compStr.GetLayers()\t\r\n\t\tfor i in range(len(layers)):\r\n\t\t\tmat = doc.GetElement(layers[i].MaterialId)\r\n\t\t\tif mat:\r\n\t\t\t\ttry:\r\n\t\t\t\t\tvalue = GetMaterialInfo(mat)\r\n\t\t\t\texcept:\r\n\t\t\t\t\tvalue = None\r\n\t\t\t\tmaterial = {\"name\":mat.Name, \"value\":value}\r\n\t\t\telse:\r\n\t\t\t\tvalue = {}\r\n\t\t\t\tvalue['diffuseColor'] = [DEFAULT_COLOR, DEFAULT_COLOR , DEFAULT_COLOR, 1]\r\n\t\t\t\tvalue['name'] = \"default\"\r\n\t\t\t\tname = \"default\"\r\n\t\t\t\tmaterial = {\"name\":name, \"value\":value}\r\n\t\t\t\r\n\t\t\twidth = compStr.GetLayerWidth(i) * FOOT_TO_MM\r\n\t\t\t# Get layer width and it's function\r\n\t\t\tfunction = compStr.GetLayerFunction(i)\r\n\t\t\tif function == MaterialFunctionAssignment.Structure:\r\n\t\t\t\tfunction = \"Structure\"\r\n\t\t\telif function == MaterialFunctionAssignment.Substrate:\r\n\t\t\t\tfunction = \"Substrate\"\r\n\t\t\telif function == MaterialFunctionAssignment.Insulation:\r\n\t\t\t\tfunction = \"Insulation\"\r\n\t\t\telif function ==  MaterialFunctionAssignment.Finish2:\r\n\t\t\t\tfunction = \"Finish2\"\r\n\t\t\telif function ==  MaterialFunctionAssignment.Finish1:\r\n\t\t\t\tfunction = \"Finish1\"\r\n\t\t\telif function ==  MaterialFunctionAssignment.Membrane:\r\n\t\t\t\tfunction = \"Membrane\"\r\n\t\t\telse:\r\n\t\t\t\tfunction = \"Finish1\"\r\n\t\t\t\r\n\t\t\tlayerMaterial.append({ \"material\": material, \"width\": width,  \"function\":function }) \r\n\r\n\t\t\t\t\t\r\n\t\treturn layerMaterial\r\n\t\r\n\r\ndef tolist(obj1):\r\n\t\"\"\"\r\n\ttolist(Object obj1) : Returns Object [ ]\r\n\tEnsure object is a list. If a single non-iterable object given, then it will be wrapped in a list.\r\n\t\"\"\"\r\n\tif hasattr(obj1,\"__iter__\"): return obj1\r\n\telse: return [obj1]\r\n\t\r\n\r\n###### Main Script ######\r\nfloors = getVisibleElements(FLOOR_CATEGORY)\r\noutList = []\r\nfloorTypes = set()\r\n## Get layer information from all floors\r\nfor floor in floors:\r\n\t# Check if element is floor\r\n\r\n\tif not floor.GetType() == Floor:\r\n\t\toutList.append(None)\r\n\t\tcontinue\r\n\t# Get the Floor FloorType ( i.e.FamilyType)\t\r\n\tf = floor.FloorType\r\n\t#print f\r\n\t# Get all the Materials in the Floor Compound Structure...\r\n\tname = Element.Name.GetValue(f)\r\n\r\n\tif name not in floorTypes:\r\n\t\t#print \"------------------\", name, \"------------\"\r\n\t\toutList.append({ name : GetLayerMaterials(f)})\r\n\t\tfloorTypes.add(name)\r\n\t\tcontinue\t\t\t\r\n\r\n# Return the results to the Dynamo Workspace...\r\n\r\noutList = json.dumps(outList, False, False)\r\nOUT = outList",
      "VariableInputPorts": true,
      "Id": "ae9eb79d70624a8595b36288727492f0",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "f15d2cc7f4ba4124ab901e34e78d0534",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "import sys\r\nsys.path.append(\"C:\\Program Files (x86)\\IronPython 2.7\\Lib\")\r\nimport clr\r\nclr.AddReference('RevitAPI')\r\nimport Autodesk\r\nfrom Autodesk.Revit.DB import *\r\n\r\nclr.AddReference('RevitNodes')\r\nimport Revit\r\nclr.ImportExtensions(Revit.GeometryConversion)\r\nclr.ImportExtensions(Revit.Elements)\r\nfrom Revit.Elements import *\r\n\r\nclr.AddReference('RevitServices')\r\nimport RevitServices\r\nfrom RevitServices.Persistence import DocumentManager\r\nfrom RevitServices.Transactions import TransactionManager\r\n\r\nimport json\r\nimport os\r\n\r\ndoc = DocumentManager.Instance.CurrentDBDocument\r\n#Constants\r\nDOOR_CATEGORY = BuiltInCategory.OST_Doors\r\nFOOT_TO_MM = 304.8\r\n\r\n###### Definitions ######\r\ndef getVisibleElements(category):\r\n\t\"\"\"\r\n\tgetVisibleElements takes revit category as input and provides all visible element of that category in active view\r\n\t\"\"\"\r\n\tview = doc.ActiveView\r\n\tcategoryFilter = ElementCategoryFilter(category)\r\n\tcollector = FilteredElementCollector( doc, view.Id).WhereElementIsNotElementType().WherePasses(categoryFilter)\r\n\treturn collector.ToElements()\r\n\r\ndef isclose(a, b, rel_tol=1e-09, abs_tol=0.0):\r\n\t\"\"\"\r\n\tcheck if a and b are closed values \r\n\t\"\"\"\r\n\treturn abs(a-b) <= max(rel_tol * max(abs(a), abs(b)), abs_tol)\r\n\t\r\ndef checkIfPointExist(currentLine, allLines):\r\n\tfor line in allLines:\r\n\t\tstartPoint = line.GetEndPoint(0)\r\n\t\tendPoint = line.GetEndPoint(1)\r\n\t\tcurrentStartPoint = currentLine.GetEndPoint(0)\r\n\t\tcurrentEndPoint = currentLine.GetEndPoint(1)\r\n\t\tif ( round(startPoint[0],3) == round(currentStartPoint[0],3) and round(startPoint[1],3) == round(currentStartPoint[1],3) and round(endPoint[0],3) == round(currentEndPoint[0],3) and round(endPoint[1],3) == round(currentEndPoint[1],3)) or (round(endPoint[0],3) == round(currentStartPoint[0],3) and round(endPoint[1],3) == round(currentStartPoint[1],3) and round(startPoint[0],3) == round(currentEndPoint[0],3) and round(startPoint[1],3) == round(currentEndPoint[1],3)):\r\n\t\t return False\r\n\t\t\r\n\treturn True\t\r\n\r\n\r\nitems = getVisibleElements(DOOR_CATEGORY)\r\nopt = Options()\r\nopt.IncludeNonVisibleObjects = False\r\ndoorTypes = set()\r\ndoorData = {}\r\ndoorsWallMap = {}\r\nfor i in items:\r\n\tgeoData = []\r\n\ttry:\r\n\t\tdoorID = i.Id.ToString()\r\n\t\tdoor = i.Name + \" \"+ i.Symbol.FamilyName \r\n\t\t# facing flipped, handflipped == t,t or f,f => symbol same in both case. True for flipped, handflipped = t,f or f,t\r\n\t\tif i.FacingFlipped == i.HandFlipped:\r\n\t\t\tdoor += \" 0\"\r\n\t\telse:\r\n\t\t\tdoor += \" 1\"\r\n\t\t\r\n\t\tallLines = []\r\n\t\t# If element has associated plan view use that else get active 3d view\r\n\t\ttry:\r\n\t\t\tviewId = doc.GetElement(i.LevelId).FindAssociatedPlanViewId()\r\n\t\texcept:\r\n\t\t\tviewId = -1\r\n\t\tif str(viewId) == \"-1\":\r\n\t\t\tview = doc.ActiveView\r\n\t\telse:\r\n\t\t\tview = doc.GetElement(viewId)\r\n\t\topt.View = view\r\n\t\r\n\t\tgeoEle = i.get_Geometry(opt)\r\n\t\tfor geoInstance in geoEle:\r\n\t\t\t# get symbol geometry of geominstance\r\n\t\t\tfor symbIns in geoInstance.GetSymbolGeometry():\r\n\t\t\t\tif isinstance(symbIns, Line):\r\n\t\t\t\t\tlines = symbIns\r\n\t\t\t\t\tgeoData.append({\"type\":\"Line\",\"startPoint\":[lines.GetEndPoint(0)[idx]*FOOT_TO_MM for idx in range(3)], \"endPoint\":[lines.GetEndPoint(1)[idx]*FOOT_TO_MM for idx in range(3)]})\r\n\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n\t\t\t\telif isinstance(symbIns, Arc):\r\n\t\t\t\t\tarcPoints = symbIns.Tessellate()\r\n\t\t\t\t\tpoints = []\r\n\t\t\t\t\tfor arcPoint in arcPoints:\r\n\t\t\t\t\t\tpoints.append([arcPoint[idx]* 304.8 for idx in range(3)])\r\n\t\t\t\t\tgeoData.append({\"type\":\"Arc\",\"points\":points})\r\n\t\t\t\t\t\t\r\n\t\t\t\telif isinstance(symbIns, Solid):\r\n\t\t\t\t\tsolid = symbIns\r\n\t\t\t\t\t\t\r\n\t\t\t\t\tfor edge in solid.Edges:\r\n\t\t\t\t\t\tedge = edge.AsCurve()\r\n\t\t\t\t\t\tif isinstance(edge, Line):\r\n\t\t\t\t\t\t\tlines = edge\r\n\t\t\t\t\t\t\t# check line exists already in symbol as 2D line ignoring(z)\r\n\t\t\t\t\t\t\tif checkIfPointExist(lines, allLines) and lines.GetEndPoint(0)[2] == lines.GetEndPoint(1)[2]:\r\n\t\t\t\t\t\t\t\tallLines.append(lines)\r\n\t\t\t\t\t\t\t\tgeoData.append({\"type\":\"Line\",\"startPoint\":[lines.GetEndPoint(0)[idx]*FOOT_TO_MM for idx in range(3)], \"endPoint\":[lines.GetEndPoint(1)[idx]*FOOT_TO_MM for idx in range(3)]})\r\n\r\n\t\t\t\t\t\tif isinstance(edge, Arc):\r\n\t\t\t\t\t\t\tarcs = edge\r\n\texcept Exception as e:\r\n\t\tprint e\r\n\t\tcontinue\r\n\t\t\r\n\tdoorData[doorID] = geoData\r\n\t\r\n# get host of the door\r\nfor i in items:\r\n\ttry:\r\n\t\tif i.Host:\r\n\t\t\tdoorsWallMap[i.Id.ToString()] = i.Host.Id.ToString()\r\n\texcept:\r\n\t\tdoorsWallMap[i.Id.ToString()] = None\r\n\t\r\n\t\r\n\r\nOUT= json.dumps(doorData, False, False), json.dumps(doorsWallMap, False, False)\r\n",
      "VariableInputPorts": true,
      "Id": "bf48d77cdb9d48e08ca847a27e74e513",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "a4429d5ecbb24b3f8cd32f745cb9c2cb",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "import sys\r\nsys.path.append(\"C:\\Program Files (x86)\\IronPython 2.7\\Lib\")\r\nimport clr\r\nclr.AddReference('RevitAPI')\r\nimport Autodesk\r\nfrom Autodesk.Revit.DB import *\r\n\r\nclr.AddReference('RevitNodes')\r\nimport Revit\r\nclr.ImportExtensions(Revit.GeometryConversion)\r\nclr.ImportExtensions(Revit.Elements)\r\nfrom Revit.Elements import *\r\n\r\nclr.AddReference('RevitServices')\r\nimport RevitServices\r\nfrom RevitServices.Persistence import DocumentManager\r\nfrom RevitServices.Transactions import TransactionManager\r\n\r\nimport json\r\n\r\ndoc = DocumentManager.Instance.CurrentDBDocument\r\n\r\n#Constants\r\nWINDOW_CATEGORY = BuiltInCategory.OST_Windows\r\nFOOT_TO_MM = 304.8\r\n\r\n###### Definitions ######\r\ndef getVisibleElements(category):\r\n\t\"\"\"\r\n\tgetVisibleElements takes revit category as input and provides all visible element of that category in active view\r\n\t\"\"\"\r\n\tview = doc.ActiveView\r\n\tcategoryFilter = ElementCategoryFilter(category)\r\n\tcollector = FilteredElementCollector( doc, view.Id).WhereElementIsNotElementType().WherePasses(categoryFilter)\r\n\treturn collector.ToElements()\r\n\r\ndef isclose(a, b, rel_tol=1e-09, abs_tol=0.0):\r\n\t\"\"\"\r\n\tcheck if a and b are closed values \r\n\t\"\"\"\r\n\treturn abs(a-b) <= max(rel_tol * max(abs(a), abs(b)), abs_tol)\r\n\t\r\ndef checkIfPointExist(currentLine, allLines):\r\n\tfor line in allLines:\r\n\t\tstartPoint = line.GetEndPoint(0)\r\n\t\tendPoint = line.GetEndPoint(1)\r\n\t\tcurrentStartPoint = currentLine.GetEndPoint(0)\r\n\t\tcurrentEndPoint = currentLine.GetEndPoint(1)\r\n\t\tif ( round(startPoint[0],3) == round(currentStartPoint[0],3) and round(startPoint[1],3) == round(currentStartPoint[1],3) and round(endPoint[0],3) == round(currentEndPoint[0],3) and round(endPoint[1],3) == round(currentEndPoint[1],3)) or (round(endPoint[0],3) == round(currentStartPoint[0],3) and round(endPoint[1],3) == round(currentStartPoint[1],3) and round(startPoint[0],3) == round(currentEndPoint[0],3) and round(startPoint[1],3) == round(currentEndPoint[1],3)):\r\n\t\t return False\r\n\t\t\r\n\treturn True\t\r\n\r\n###### Inputs ######\r\n\r\n\r\nitems = getVisibleElements(WINDOW_CATEGORY)\r\n\r\n\r\nopt = Options()\r\nopt.IncludeNonVisibleObjects = False\r\nopt.View = doc.ActiveView\r\nwindowTypes = set()\r\nwindowData = {}\r\nwindowsWallMap = {}\r\n\r\nfor i in items:\r\n\tgeoData = []\r\n\ttry:\r\n\t\tid = i.Id.ToString()\r\n\t\twindow = i.Name + \" \"+ i.Symbol.FamilyName \r\n\t\t# facing flipped, handflipped == t,t or f,f => symbol same in both case. True for flipped, handflipped = t,f or f,t\r\n\t\tif i.FacingFlipped == i.HandFlipped:\r\n\t\t\twindow += \" 0\"\r\n\t\telse:\r\n\t\t\twindow += \" 1\"\r\n\t\t\r\n\t\tallLines = []\r\n\t\t# If element has associated plan view use that else get active 3d view\r\n\t\ttry:\r\n\t\t\tviewId = doc.GetElement(i.LevelId).FindAssociatedPlanViewId()\r\n\t\texcept:\r\n\t\t\tviewId = -1\r\n\t\tif str(viewId) == \"-1\":\r\n\t\t\tview = doc.ActiveView\r\n\t\telse:\r\n\t\t\tview = doc.GetElement(viewId)\r\n\t\topt.View = view\r\n\r\n\t\r\n\t\tgeoEle = i.get_Geometry(opt)\r\n\t\tfor geoInstance in geoEle:\r\n\t\t\t# get symbol geometry of geominstance\r\n\t\t\tfor symbIns in geoInstance.GetSymbolGeometry():\r\n\t\t\t\tif isinstance(symbIns, Line):\r\n\t\t\t\t\tlines = symbIns\r\n\t\t\t\t\tgeoData.append({\"type\":\"Line\",\"startPoint\":[lines.GetEndPoint(0)[idx]*FOOT_TO_MM for idx in range(3)], \"endPoint\":[lines.GetEndPoint(1)[idx]*FOOT_TO_MM for idx in range(3)]})\r\n\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n\t\t\t\telif isinstance(symbIns, Arc):\r\n\t\t\t\t\tarcPoints = symbIns.Tessellate()\r\n\t\t\t\t\tpoints = []\r\n\t\t\t\t\tfor arcPoint in arcPoints:\r\n\t\t\t\t\t\tpoints.append([arcPoint[idx]* 304.8 for idx in range(3)])\r\n\t\t\t\t\tgeoData.append({\"type\":\"Arc\",\"points\":points})\r\n\t\t\t\t\t\t\r\n\t\t\t\telif isinstance(symbIns, Solid):\r\n\t\t\t\t\tsolid = symbIns\r\n\t\t\t\t\t\r\n\t\t\t\t\tfor edge in solid.Edges:\r\n\t\t\t\t\t\tedge = edge.AsCurve()\r\n\t\t\t\t\t\tif isinstance(edge, Line):\t\t\t\t\t\r\n\t\t\t\t\t\t\tlines = edge\r\n\t\t\t\t\t\t\t# check line exists already in symbol as 2D line ignoring(z)\r\n\t\t\t\t\t\t\tif checkIfPointExist(lines, allLines) and lines.GetEndPoint(0)[2] == lines.GetEndPoint(1)[2]:\r\n\t\t\t\t\t\t\t\t#print \" Solid Lines:\"\r\n\t\t\t\t\t\t\t\tallLines.append(lines)\r\n\t\t\t\t\t\t\t\tgeoData.append({\"type\":\"Line\",\"startPoint\":[lines.GetEndPoint(0)[idx]*FOOT_TO_MM for idx in range(3)], \"endPoint\":[lines.GetEndPoint(1)[idx]*FOOT_TO_MM for idx in range(3)]})\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\tif isinstance(edge, Arc):\r\n\t\t\t\t\t\t\tarcs = edge\r\n\texcept:\r\n\t\tcontinue\r\n\twindowData[id] = geoData\r\n\r\n# get host of the windows\r\nfor i in items:\r\n\ttry:\r\n\t\tif i.Host:\r\n\t\t\twindowsWallMap[i.Id.ToString()] = i.Host.Id.ToString()\r\n\texcept:\r\n\t\twindowsWallMap[i.Id.ToString()] = None\r\n\t\t\r\nOUT=json.dumps(windowData, False, False), json.dumps(windowsWallMap, False, False)",
      "VariableInputPorts": true,
      "Id": "ee98aea1194944b7bfc72fe0f1bafd4c",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "82c55af1bb1846b0bc739d7a36c1abfc",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "CoreNodeModels.Watch, CoreNodeModels",
      "NodeType": "ExtensionNode",
      "Id": "826ea47710e840fb94245682e24847c0",
      "Inputs": [
        {
          "Id": "b9c1a5131d2b4fb5a95e8f168831b475",
          "Name": "",
          "Description": "Node to evaluate.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "1776cceab123411b8504bf0c6e97164e",
          "Name": "",
          "Description": "Watch contents.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Visualize the output of node."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "###### Imports ######\r\nimport sys\r\nsys.path.append(\"C:\\Program Files (x86)\\IronPython 2.7\\Lib\")\r\nimport clr\r\nimport json\r\nimport os\r\nimport re\r\n\r\nclr.AddReference(\"RevitServices\")\r\nimport RevitServices\r\nfrom RevitServices.Persistence import DocumentManager\r\ndoc =  DocumentManager.Instance.CurrentDBDocument\r\n\r\nclr.AddReference(\"RevitAPIIFC\")\r\nclr.AddReference(\"RevitAPI\")\r\nfrom Autodesk.Revit.DB import *\r\nfrom Autodesk.Revit.DB.Visual import *\r\nfrom Autodesk.Revit.DB.IFC import *\r\n\r\n##Constants\r\nDEFAULT_COLOR = float(80)/255\r\nFOOT_TO_MM = 304.8\r\nCEILING_CATEGORY = BuiltInCategory.OST_Ceilings\r\n\r\n###### Definitions ######\r\ndef getVisibleElements(category):\r\n\t\"\"\"\r\n\tgetVisibleElements takes revit category as input and provides all visible element of that category in active view\r\n\t\"\"\"\r\n\tview = doc.ActiveView\r\n\tcategoryFilter = ElementCategoryFilter(category)\r\n\tcollector = FilteredElementCollector( doc, view.Id).WhereElementIsNotElementType().WherePasses(categoryFilter)\r\n\treturn collector.ToElements()\r\n\r\ndef isclose(a, b, rel_tol=1e-09, abs_tol=0.0):\r\n\t\"\"\"\r\n\tcheck if a and b are closed values \r\n\t\"\"\"\r\n\treturn abs(a-b) <= max(rel_tol * max(abs(a), abs(b)), abs_tol)\r\n\r\ndef convertUnitsTomm(value, unit):\r\n\t\"\"\"\r\n\tConverts value given in {unit} to millimeter\r\n\tFor Revit 2021 - 2022 : unit should be in UnitTypeId\r\n\tFor Lower Revit version : unit should be in DisplayUnitType\r\n\t\"\"\"\r\n\tif DisplayUnitType.DUT_DECIMAL_INCHES == unit:\r\n\t\treturn value*25.4\r\n\telif DisplayUnitType.DUT_CENTIMETERS == unit:\r\n\t\treturn value*10\r\n\telif DisplayUnitType.DUT_DECIMAL_FEET == unit:\r\n\t\treturn value*304.8\r\n\telif DisplayUnitType.DUT_MILLIMETERS == unit:\r\n\t\treturn value\r\n\telif DisplayUnitType.DUT_METERS == unit:\r\n\t\treturn value*1000\r\n\tprint unit\r\n\treturn value\r\n\t\r\ndef GetMaterialInfo(mat):\r\n\t\"\"\"\r\n\tGetMaterialInfo provides information about the material\r\n\t\"\"\"\r\n\tvalue = {}\r\n\tdef GetTextureInformation(texture_path, asset):\r\n\t\t\"\"\"\r\n\t\tGet texture information from unifiedBitMap\r\n\t\t\"\"\"\r\n\t\tvalue[\"path\"] = os.path.basename(texture_path)\r\n\t\tif asset.FindByName(\"texture_RealWorldScaleX\") and asset.FindByName(\"texture_RealWorldScaleY\"):\r\n\t\t\tunitX = asset.FindByName(\"texture_RealWorldScaleX\").DisplayUnitType\r\n\t\t\tunitY = asset.FindByName(\"texture_RealWorldScaleY\").DisplayUnitType\r\n\t\t\tuScale = asset.FindByName(\"texture_RealWorldScaleX\").Value\r\n\t\t\tvScale = asset.FindByName(\"texture_RealWorldScaleY\").Value\r\n\t\t\t\t#print uScale, uScale, unitX.TypeId\r\n\t\t\tvalue[\"uScale\"] = convertUnitsTomm(uScale, unitX)\r\n\t\t\tvalue[\"vScale\"] = convertUnitsTomm(vScale, unitY)\r\n\t\telse:\r\n\t\t\tif asset.FindByName(\"texture_UScale\"):\r\n\t\t\t\tvalue[\"uScale\"] = asset.FindByName(\"texture_UScale\").Value\r\n\t\t\tif asset.FindByName(\"texture_VScale\"):\r\n\t\t\t\tvalue[\"vScale\"] = asset.FindByName(\"texture_VScale\").Value\r\n\t\tif asset.FindByName(\"texture_UOffset\"):\r\n\t\t\tvalue[\"uOffset\"] = asset.FindByName(\"texture_UOffset\").Value\r\n\t\tif  asset.FindByName(\"texture_VOffset\"):\r\n\t\t\tvalue[\"vOffset\"] = asset.FindByName(\"texture_VOffset\").Value\r\n\t\tif asset.FindByName(\"texture_WAngle\"):\r\n\t\t\tvalue[\"wAng\"] = asset.FindByName(\"texture_WAngle\").Value\r\n\t\t\r\n\tdef getparameterFromAsset(asset):\r\n\t\t\"\"\"\r\n\t\tUsed for nested Asset\r\n\t\t\"\"\"\r\n\t\tfor i in range(asset.Size):\r\n\t\t\t#print getRenderingAsset.Get(i).Name\r\n\t\t\tname = asset.Get(i).Name\r\n\t\t\tif name == \"unifiedbitmap_Bitmap\":\r\n\t\t\t\ttexture_path = asset.FindByName(\"unifiedbitmap_Bitmap\").Value\r\n\t\t\t\tif texture_path:\r\n\t\t\t\t\tGetTextureInformation(texture_path, asset)\r\n\t\t\t\t\treturn value\r\n\t\r\n\tdef getGlassMaterial(renderingAsset):\r\n\t\tGLAZINGCOLOR = [\"Clear\", \"Green\", \"Gray\",\"Blue\", \"Bluegreen\", \"Bronze\", \"Custom\"]\r\n\t\tcolorMap = renderingAsset.FindByName(\"glazing_transmittance_color\").Value\r\n\t\tglassColor = GLAZINGCOLOR[colorMap]\r\n\t\t\t\t\r\n\t\tif glassColor == \"Clear\":\r\n\t\t\tvalue[\"diffuseColor\"] = [0,0,0,0.2]\r\n\t\telif glassColor == \"Green\":\r\n\t\t\tvalue[\"diffuseColor\"] = [0,1,0,0.2]\r\n\t\telif glassColor == \"Gray\":\r\n\t\t\tvalue[\"diffuseColor\"] = [0.32, 0.32, 0.32,0.2]\r\n\t\telif glassColor == \"Blue\":\r\n\t\t\tvalue[\"diffuseColor\"] = [0, 0, 1,0.2]\r\n\t\telif glassColor == \"Bluegreen\":\r\n\t\t\tvalue[\"diffuseColor\"] = [0.05,0.59,0.73,0.2]\r\n\t\telif glassColor == \"Bronze\":\r\n\t\t\tvalue[\"diffuseColor\"] = [0.8, 0.5,0.2,0.2]\r\n\t\telse:\r\n\t\t\tcolorMap = renderingAsset.FindByName(\"glazing_transmittance_map\").GetValueAsDoubles()\r\n\t\t\tvalue[\"diffuseColor\"] = [ i for i in colorMap]\r\n\t\t\tvalue[\"diffuseColor\"].append(0.2)\r\n\t\t\t#print value[\"diffuseColor\"]\r\n\t\treturn value\r\n\t\t\r\n\tdef getConsistentColor(mat):\r\n\t\t\"\"\"\r\n\t\tInCase appearanceAsset is not present or renderingAsset is empty use consistentColor\r\n\t\t\"\"\"\r\n\t\tvalue['diffuseColor'] = [float(mat.Color.Red)/255, float(mat.Color.Green)/255, float(mat.Color.Blue)/255, 1 - float(mat.Transparency)/100]\r\n\t\tvalue['name'] = mat.Id.ToString()\r\n\t\treturn value\r\n\t\t\r\n\tappearanceAssetId = mat.AppearanceAssetId\r\n\t\r\n\tassetElem = doc.GetElement(appearanceAssetId)\r\n\tif not assetElem: \r\n\t\t# return consistent color\r\n\t\tvalue = getConsistentColor(mat)\r\n\t\treturn value \r\n\t\r\n\trenderingAsset = assetElem.GetRenderingAsset()\r\n\t\r\n\tif renderingAsset.Size == 0:\r\n\t\t# return consistent color\r\n\t\tvalue = getConsistentColor(mat)\r\n\t\treturn value\r\n\t\t\r\n\tvalue[\"name\"] = assetElem.Name\r\n\t\r\n\t# localName defines class of the material i.e Glazing, Metal, Ceramic etc but it could be empty as well.\r\n\tproperty = renderingAsset.FindByName(\"localname\")\r\n\tif property:\r\n\t\tproperty = property.Value.ToString()\r\n\t\tvalue[\"type\"] = property\r\n\t\t# if material class is Glass\r\n\t\tif property == \"Glazing\":\r\n\t\t\tvalue = getGlassMaterial(renderingAsset)\r\n\t\t\treturn value\r\n\t\t\t\r\n\tfor i in range(renderingAsset.Size):\r\n\t\tname = renderingAsset.Get(i).Name\r\n\t\tif name == \"unifiedbitmap_Bitmap\":\r\n\t\t\ttexture_path = asset.FindByName(\"unifiedbitmap_Bitmap\").Value\r\n\t\t\tif texture_path:\r\n\t\t\t\tGetTextureInformation(texture_path, getRenderingAsset)\r\n\t\t\t\t\t\t\t\r\n\t\tproperty = renderingAsset.FindByName(name)\r\n\t\t# diffuse => generic, glazing => glazing class\r\n\t\tisValidProperty = re.search(\"(?=(diffuse))\",property.Name.ToString() ) or re.search(r'(?=(color))',property.Name.ToString()) or re.search(r\"(?=(glazing))\", property.Name.ToString())\r\n\t\t\t\r\n\t\tif property.NumberOfConnectedProperties > 0 and property.Name.ToString() not in [\"common_Tint_color\"] and isValidProperty:\r\n\t\t\t\r\n\t\t\tif isinstance(property, AssetPropertyDoubleArray4d):\r\n\t\t\t \tvalue[\"diffuseColor\"] = [ i for i in property.GetValueAsDoubles()]\r\n\t\t\t \talpha = renderingAsset.FindByName(\"generic_transparency\")\r\n\t\t\t \tif alpha and alpha.Value != 0:\r\n\t\t\t \t\tvalue[\"diffuseColor\"][3] = float(1 - alpha.Value)\r\n\t\t\t \t\r\n\t\t\tgetparameterFromAsset(property.GetAllConnectedProperties()[0])\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\telif isinstance(property, AssetPropertyDoubleArray4d) and property.Name.ToString() not in [\"common_Tint_color\"] and isValidProperty:\r\n\t\t\tvalue[\"diffuseColor\"] = [ i for i in property.GetValueAsDoubles()]\r\n\t\t\talpha = renderingAsset.FindByName(\"generic_transparency\")\r\n\t\t\tif alpha and alpha.Value != 0:\r\n\t\t\t\tvalue[\"diffuseColor\"][3] = float(1 - alpha.Value)\r\n\t\t\t\t\t\t\t\t\r\n\treturn value\r\n\t\r\n\t\r\n\t\r\ndef GetLayerMaterials(structure, ceiling):\t\t\r\n\tcompStr = structure.GetCompoundStructure()\r\n\tlayerMaterial = [] \r\n\t#print \"-\"*8\r\n\tif compStr:\r\n\t\tlayers = compStr.GetLayers()\t\r\n\t\tfor i in range(len(layers)):\r\n\t\t\tmat = doc.GetElement(layers[i].MaterialId)\r\n\t\t\tif mat:\r\n\t\t\t\ttry:\r\n\t\t\t\t\tvalue = GetMaterialInfo(mat)\r\n\t\t\t\texcept:\r\n\t\t\t\t\tvalue = None\r\n\t\t\t\t\r\n\t\t\t\tmaterial = {\"name\":mat.Name, \"value\":value}\r\n\t\t\telse:\r\n\t\t\t\tmaterial = {\"name\":None, \"value\":None}\r\n\t\t\t\t\r\n\t\t\t# Get width of layer\r\n\t\t\twidth = compStr.GetLayerWidth(i) * 304.8 # feet to mm\r\n\t\t\t# Get function of layer\r\n\t\t\tfunction = compStr.GetLayerFunction(i)\r\n\t\t\tif function == MaterialFunctionAssignment.Structure:\r\n\t\t\t\tfunction = \"Structure\"\r\n\t\t\telif function == MaterialFunctionAssignment.Insulation:\r\n\t\t\t\tfunction = \"Insulation\"\r\n\t\t\telif function ==  MaterialFunctionAssignment.Finish2:\r\n\t\t\t\tfunction = \"Finish2\"\r\n\t\t\telif function ==  MaterialFunctionAssignment.Finish1:\r\n\t\t\t\tfunction = \"Finish1\"\r\n\t\t\telif function ==  MaterialFunctionAssignment.Membrane:\r\n\t\t\t\tfunction = \"Membrane\"\r\n\t\t\telse:\r\n\t\t\t\tfunction = \"finish\"\r\n\t\t\t\r\n\t\t\tlayerMaterial.append({ \"material\": material, \"width\": width,  \"function\":function }) \r\n\t\t\t\t\r\n\t\t\t\t#print material\r\n\t\t\t\t#print function\t\r\n\t\treturn layerMaterial\r\n\telse:\r\n\t\tmatIds = ceiling.GetMaterialIds(False)\r\n\t\tmat = None\r\n\t\tif len(matIds) > 0:\r\n\t\t\tmat = doc.GetElement(matIds[0])\r\n\t\tif mat:\r\n\t\t\ttry: \r\n\t\t\t\tvalue = GetMaterialInfo(mat)\r\n\t\t\texcept:\r\n\t\t\t\tvalue = None\r\n\t\r\n\t\t\tmaterial = {\"name\":mat.Name, \"value\":value}\r\n\t\t\tlayerMaterial.append({ \"material\": material, \"width\": 25,  \"function\": \"Structure\" })\r\n\t\t\treturn layerMaterial\r\n\t\r\n\r\ndef tolist(obj1):\r\n\t\"\"\"\r\n\ttolist(Object obj1) : Returns Object [ ]\r\n\tEnsure object is a list. If a single non-iterable object given, then it will be wrapped in a list.\r\n\t\"\"\"\r\n\tif hasattr(obj1,\"__iter__\"): return obj1\r\n\telse: return [obj1]\r\n\r\n\r\n###### Main Script ######\r\nceilings = getVisibleElements(CEILING_CATEGORY)\r\noutList = []\r\nceilingTypes = set()\r\n## Get layers information from all ceilings\r\nfor ceiling in ceilings:\r\n\tif not ceiling.GetType() == Ceiling:\r\n\t\tcontinue\r\n\t# Get the CeilingType ( i.e.FamilyType)\t\r\n\tstructure = doc.GetElement(ceiling.GetTypeId())\r\n\tname = ceiling.Name.ToString()\r\n\r\n\tif name not in ceilingTypes:\r\n\t\t#print \"------------------\", name, \"------------\"\r\n\t\toutList.append({ name : GetLayerMaterials(structure, ceiling)})\r\n\t\tceilingTypes.add(name)\r\n\t\t#print \"*\"*8\r\n\t\tcontinue\t\t\t\r\n\r\n\r\nceilingsData = {}\r\n## Get basic information, boundary and void information from the ceiling using HostObjectUtils\r\n\r\nfor c in ceilings:\r\n\tif not ceiling.GetType() == Ceiling:\r\n\t\tcontinue\r\n\tceilingId = c.Id.ToString()\r\n\ttype = c.Name.ToString()\r\n\tfamily = c.LookupParameter(\"Family\").AsValueString()\r\n\theightOffset = c.LookupParameter(\"Height Offset From Level\")\r\n\tif heightOffset:\r\n\t\theightOffset = heightOffset.AsValueString(FormatOptions(DisplayUnitType.DUT_MILLIMETERS))\r\n\telse:\r\n\t\theightOffset = 0\r\n\t\r\n\tlevel = doc.GetElement(c.LevelId)\r\n\tif level:\r\n\t\tlevelName = level.Name\r\n\telse:\r\n\t\tlevelName = None\r\n\tceilingsData[ceilingId] = {\"family\": family, \"type\": type, \"level\":levelName, \"heightOffset\": heightOffset}\r\n\t\r\n\ttry:\r\n\t\tbottomProfileRef = HostObjectUtils.GetBottomFaces(c)\r\n\t\t#print bottomProfileRef\r\n\texcept Exception as e: \r\n\t\tprint e\r\n\t\tcontinue\r\n\t\r\n\ttry:\r\n\t\tbottomProfile = c.GetGeometryObjectFromReference(bottomProfileRef[0])\r\n\t\tif bottomProfile:\r\n\t\t\tFaceNormal =  bottomProfile.FaceNormal\r\n\t\t\topt = Options()\r\n\t\t\topt.View = doc.ActiveView\r\n\t\t\tgeometry = c.get_Geometry(opt)\r\n\t\t\tsortedCurveLoops = []\r\n\t\t\tfor geo in geometry:\r\n\t\t\t\tif isinstance(geo, Solid):\r\n\t\t\t\t\tfor f in geo.Faces:\r\n\t\t\t\t\t\ttry:\r\n\t\t\t\t\t\t\tcurrentFaceNormal = f.FaceNormal\r\n\t\t\t\t\t\texcept Exception as e:\r\n\t\t\t\t\t\t\tcurrentFaceNormal = [0,0,0]\r\n\t\t\t\t\t\tareSameNormal = currentFaceNormal[2] ==  FaceNormal[2] and currentFaceNormal[1] ==  FaceNormal[1] and currentFaceNormal[0] ==  FaceNormal[0] \r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\tif areSameNormal:\r\n\t\t\t\t\t\t\tcurveLoops = f.GetEdgesAsCurveLoops()\r\n\t\t\t\t\t\t\tsortedCurveLoops = ExporterIFCUtils.SortCurveLoops(curveLoops)\r\n\t\t\t\t\t\t\tcurvesMap = {}\r\n\t\t\t\t\t\t\tvoidsMap = {}\r\n\t\t\t\t\t\t\tfor sortedcurveLoop in sortedCurveLoops:\r\n\t\t\t\t\t\t\t\tcurveLoop = sortedcurveLoop[0]\r\n\t\t\t\t\t\t\t\tcurveData = []\r\n\t\t\t\t\t\t\t\tcurveIds = []\r\n\t\t\t\t\t\t\t\tcurveKey = []\r\n\t\t\t\r\n\t\t\t\t\t\t\t\tfor cl in curveLoop.GetCurveLoopIterator():\r\n\t\t\t\t\t\t\t\t\tif isinstance(cl, Arc):\r\n\t\t\t\t\t\t\t\t\t\tpoints = cl.Tessellate()\r\n\t\t\t\t\t\t\t\t\t\tfor point in points:\r\n\t\t\t\t\t\t\t\t\t\t\tcurveData.append([point[idx]* FOOT_TO_MM for idx in range(3)])\r\n\t\t\t\t\t\t\t\t\t\tcurveKey.append(\"[\"+\", \".join([str(int(cl.GetEndPoint(0)[idx])) for idx in range(2)])+\"]\")\r\n\t\t\t\t\t\t\t\t\telif isinstance(cl, Line):\r\n\t\t\t\t\t\t\t\t\t\tcurveData.append([cl.GetEndPoint(0)[idx]* FOOT_TO_MM for idx in range(3)])\r\n\t\t\t\t\t\t\t\t\t\tcurveKey.append(\"[\"+\", \".join([str(int(cl.GetEndPoint(0)[idx])) for idx in range(2)])+\"]\")\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tcurveKey.sort()\t\r\n\t\t\t\t\t\t\t\tcurveKey = '['+\", \".join(curveKey)+']' + ceilingId\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tcurvesMap[curveKey] = curveData\t\r\n\t\t\t\t\t\t\t\tif len(sortedcurveLoop) > 1:\t\r\n\t\t\t\t\t\t\t\t\tvoidsMap[curveKey] = {}\r\n\t\t\t\t\t\t\t\tfor voidLoopId in range(1,len(sortedcurveLoop)):\r\n\t\t\t\t\t\t\t\t\tvoidLoop = sortedcurveLoop[voidLoopId]\r\n\t\t\t\t\t\t\t\t\tvoidsData = []\r\n\t\t\t\t\t\t\t\t\tvoidKey = []\r\n\t\t\t\t\t\t\t\t\tfor cl in voidLoop.GetCurveLoopIterator():\r\n\t\t\t\t\t\t\t\t\t\ttry:\r\n\t\t\t\t\t\t\t\t\t\t\tif isinstance(cl, Arc): \r\n\t\t\t\t\t\t\t\t\t\t\t\tpoints = cl.Tessellate()\r\n\t\t\t\t\t\t\t\t\t\t\t\tfor point in points:\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tvoidsData.append([point[idx]*FOOT_TO_MM for idx in range(3)])\r\n\t\t\t\t\t\t\t\t\t\t\t\tvoidKey.append(\"[\"+\", \".join([str(int(cl.GetEndPoint(0)[idx])) for idx in range(2)])+\"]\")\r\n\t\t\t\t\t\t\t\t\t\t\t\tcontinue\r\n\t\t\t\t\t\t\t\t\t\texcept Exception as e:\r\n\t\t\t\t\t\t\t\t\t\t\tprint e\r\n\t\t\t\t\t\t\t\t\t\t\tcontinue\r\n\t\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\tvoidsData.append([cl.GetEndPoint(0)[idx]* FOOT_TO_MM for idx in range(3)])\r\n\t\t\t\t\t\t\t\t\t\tvoidKey.append(\"[\"+\", \".join([str(int(cl.GetEndPoint(0)[idx])) for idx in range(2)])+\"]\")\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\tvoidKey.sort()\t\t\t\t\r\n\t\t\t\t\t\t\t\t\tvoidKey = '['+\", \".join(voidKey)+']' + ceilingId\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\tvoidsMap[curveKey][voidKey] = voidsData\t\r\n\t\t\tif(len(sortedCurveLoops) > 0):\r\n\t\t\t\tceilingsData[ceilingId][\"outline\"] = curvesMap\r\n\t\t\t\tceilingsData[ceilingId][\"voids\"] = voidsMap\r\n\t\t\t\r\n\texcept Exception as e:\r\n\t\tprint e\r\n\t\tcontinue\r\n\t\r\n# Return the results to the Dynamo Workspace...\r\n\r\noutList = json.dumps(outList, False, False), json.dumps(ceilingsData, False, False)\r\nOUT = outList",
      "VariableInputPorts": true,
      "Id": "6a513145708b48d6867c9286abd04402",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "1f131e0090b1458f95697d4e06a0f554",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "import sys\r\nsys.path.append(\"C:\\Program Files (x86)\\IronPython 2.7\\Lib\")\r\nimport clr\r\nimport json\r\nimport os\r\nimport re\r\nimport math\r\nfrom math import pi\r\nclr.AddReference(\"RevitAPI\")\r\nclr.AddReference(\"RevitAPIIFC\")\r\nfrom Autodesk.Revit.DB import *\r\nfrom Autodesk.Revit.DB.Visual import *\r\nfrom Autodesk.Revit.DB.IFC import *\r\n\r\nclr.AddReference(\"RevitServices\")\r\n\r\nimport RevitServices\r\nfrom RevitServices.Persistence import DocumentManager\r\ndoc =  DocumentManager.Instance.CurrentDBDocument\r\n\r\noptions = Options()\r\nview = doc.ActiveView\r\ndebug = []\r\n\r\nDIRECTSHAPE = \"Autodesk.Revit.DB.DirectShape\"\r\nDEFAULT_COLOR = float(80)/255\r\nFOOT_TO_MM = 304.8\r\n\r\n#Load all default materials \r\nuiapp = DocumentManager.Instance.CurrentUIApplication\r\napp = uiapp.Application\r\n\r\ndefaultMaterials = app.GetAssets(AssetType.Appearance)\r\n\r\ndef getDefaultMaterial(name):\r\n\tfor mat in defaultMaterials:\r\n\t\tif mat.Name == name:\r\n\t\t\treturn mat\r\n\r\n\r\nclass Stack:\r\n\tdef __init__(self):\r\n\t\tself.__list = []\r\n\tdef Push(self, item):\r\n\t\tself.__list.append(item)\r\n\tdef Pop(self):\r\n\t\treturn self.__list.pop()\r\n\tdef Peek(self):\r\n\t\treturn self.__list[-1]\r\n\t\t\r\nclass myContextExport(IExportContext):\r\n\ttransformationStack = Stack()\r\n\t\r\n\t\r\n\tdef __init__(self, doc):\r\n\t\tself.doc = doc\r\n\t\tself._primaryDocument = doc\r\n\t\tself.transformationStack.Push( Transform.Identity )\r\n\t\tself.familyData = {\"Doors\": {}, \"Furniture\":{}, \"Floors\":{}, \"Windows\" : {}, \"Railings\" : {}, \"Security Devices\":{}, \"Fire Alarm Devices\":{}, \"Communication Devices\":{}, \"Lighting Fixtures\":{}, \"Casework\" : {}, \"Furniture Systems\":{}, \"Planting\" :{}, \"Electrical Fixtures\":{}, \"Data Devices\": {}, \"Lighting Devices\":{}, \"Specialty Equipment\":{}, \"RVT Links\":{}, \"Curtain Wall Mullions\" : {},\"Curtain Panels\": {},\"Stairs\":{}, \"Structural Columns\" :{},\"Generic Models\":{}, \"Assemblies\":{}, \"Model Groups\":{},\"Ducts\": {}, \"Duct Fittings\":{}, \"Flex Ducts\":{}, \"Cable Trays\" : {}, \"Air Terminals\" : {}, \"Mechanical Equipment\" : {}, \"Cable Tray Fittings\" : {}, \"Duct Accessories\":{}, \"Top Rails\": {}, \"Ramps\":{}, \"Mass\" : {},  \"Plumbing Fixtures\":{},\"Pipes\":{}, \"Pipe Fittings\":{}, \"Conduit Fittings\": {}, \"Conduits\":{}, \"Electrical Equipment\":{}, \"Sprinklers\":{}, \"Structural Framing\" :{}, \"Columns\" : {}, \"Walls\":{} }\r\n\t\t\r\n\t\tself.data = {\"Doors\": {}, \"Furniture\":{}, \"Floors\":{}, \"Windows\" : {}, \"Railings\" : {}, \"Security Devices\":{}, \"Fire Alarm Devices\":{}, \"Communication Devices\":{}, \"Lighting Fixtures\":{}, \"Casework\" : {},\"Furniture Systems\":{}, \"Planting\":{},\"Electrical Fixtures\":{},\"Data Devices\": {}, \"Lighting Devices\" :{}, \"Specialty Equipment\":{}, \"RVT Links\":{}, \"Curtain Wall Mullions\" : {},\"Curtain Panels\": {},\"Stairs\":{}, \"Structural Columns\" :{}, \"Generic Models\":{}, \"Assemblies\":{}, \"Model Groups\":{},\"Ducts\": {}, \"Duct Fittings\":{}, \"Flex Ducts\":{}, \"Cable Trays\" : {}, \"Air Terminals\" : {}, \"Mechanical Equipment\" : {}, \"Cable Tray Fittings\" : {}, \"Duct Accessories\":{}, \"Top Rails\": {}, \"Ramps\":{}, \"Mass\" : {}, \"Plumbing Fixtures\":{},\"Pipes\":{}, \"Pipe Fittings\":{}, \"Conduit Fittings\": {}, \"Conduits\":{}, \"Electrical Equipment\":{}, \"Sprinklers\":{}, \"Structural Framing\" :{}, \"Columns\" : {}, \"Walls\":{} }\r\n\t\t\r\n\t\tself.creationData = {\"Doors\": {}, \"Furniture\":{}, \"Floors\":{}, \"Windows\" : {}, \"Railings\" : {}, \"Security Devices\":{}, \"Fire Alarm Devices\":{}, \"Communication Devices\":{}, \"Lighting Fixtures\":{}, \"Casework\" : {}, \"Furniture Systems\":{}, \"Planting\": {}, \"Electrical Fixtures\":{}, \"Data Devices\": {}, \"Lighting Devices\": {}, \"Specialty Equipment\":{},\"RVT Links\":{}, \"Curtain Wall Mullions\" : {},\"Curtain Panels\": {},\"Stairs\":{}, \"Structural Columns\" :{},\"Generic Models\":{},\"Assemblies\":{}, \"Model Groups\":{},\"Ducts\": {}, \"Duct Fittings\":{}, \"Flex Ducts\":{}, \"Cable Trays\" : {}, \"Air Terminals\" : {}, \"Mechanical Equipment\" : {}, \"Cable Tray Fittings\" : {}, \"Duct Accessories\":{}, \"Top Rails\": {}, \"Ramps\":{}, \"Mass\" : {}, \"Plumbing Fixtures\":{},\"Pipes\":{}, \"Pipe Fittings\":{}, \"Conduit Fittings\": {}, \"Conduits\":{}, \"Electrical Equipment\":{}, \"Sprinklers\":{}, \"Structural Framing\" :{}, \"Columns\" : {} , \"Walls\":{}  }\r\n\t\t\r\n\t\tself._MEPList = [\"Ducts\", \"Duct Fittings\", \"Flex Ducts\", \"Cable Trays\", \"Cable Tray Fittings\", \"Duct Accessories\",  \"Air Terminals\", \"Pipes\", \"Pipe Fittings\", \"Conduit Fittings\", \"Conduits\"] \r\n\t\tself._familyList = set()\r\n\t\tself._currentFamilyElement = {\"name\" : \"\", \"category\" : \"\", \"materials\": [] }\r\n\t\t\r\n\t\tself._categoryList = [\"Furniture\", \"Casework\", \"Doors\", \"Windows\", \"FurnitureSystems_single\", \"Security Devices\", \"Fire Alarm Devices\", \"Communication Devices\", \"Lighting Fixtures\", \"Furniture Systems\",\"Planting\",\"Electrical Fixtures\", \"Data Devices\", \"Lighting Devices\", \"Specialty Equipment\",\"Stairs\", \"Curtain Panels\", \"Curtain Wall Mullions\",\"Generic Models\",\"Assemblies\", \"Model Groups\", \"Mechanical Equipment\", \"Railings\", \"Top Rails\", \"Ramps\", \"Plumbing Fixtures\",\"Electrical Equipment\", \"Sprinklers\" ]\r\n\t\t\r\n\t\tself._currentLink = {\"name\":\"\"}\r\n\t\tself._linkCategory = [\"Floors\", \"Walls\", \"Specialty Equipment\", \"Doors\", \"Windows\", \"Stairs\", \"Curtain Wall Mullions\",      \"Curtain Panels\", \"Structural Columns\", \"Communication Devices\",  \"Furniture\", \"Casework\",\"Generic Models\", \"Lighting Devices\", \"Lighting Fixtures\", \"Ceilings\", \"Columns\", \"Air Terminals\", \"Mechanical Equipment\", \"Ducts\", \"Duct Fittings\", \"Flex Ducts\", \"Cable Trays\", \"Cable Tray Fittings\", \"Duct Accessories\", \"Top Rails\",\"Railings\", \"Ramps\", \"Structural Framing\" ]\r\n\t\tself._currentLinkElement = {\"name\":{}, \"category\":{},\"materials\": []}\r\n\t\t\r\n\t\tself._linkKeys = []\r\n\t\tself._levels = []\r\n\t\t\r\n\t\tself._isRevitLink = False\r\n\t\tself.debugList = []\r\n\t\t\r\n\t\t\r\n\t\tself._currentMaterialId = \"-1\"\r\n\tdef Start(self):\r\n\t\tprint \"Start\"\r\n\t\treturn True\r\n\t\r\n\tdef Finish(self):\r\n\t\tprint \"Finish\"\r\n\t\t\r\n\tdef IsCanceled(self):\r\n\t\treturn False\r\n\t\t\r\n\tdef OnViewBegin(self, node):\r\n\t\treturn RenderNodeAction.Proceed\r\n\t\r\n\tdef OnViewEnd(self, node):\r\n\t\tpass\r\n\t\r\n\tdef OnLinkBegin(self, node):\r\n\t\t#print node\r\n\t\tself._isRevitLink = True\r\n\t\t#print \"isRevitLink\", self._isRevitLink\r\n\t\tself.doc = node.GetDocument()\r\n\t\t#name = node.NodeName\r\n\t\tname = self.doc.Title.replace(\".\", \"\")\r\n\t\t\r\n\t\tcategory = \"RVT Links\"\r\n\t\tself._currentLink[\"name\"] = name\r\n\t\tself._currentLink[\"category\"] = category\r\n\t\tself.transformationStack.Push(self.CurrentTransform().Multiply( node.GetTransform() ))\r\n\t\t\r\n\r\n\t\tif name not in self._linkKeys:\r\n\t\t\tself._linkKeys.append(name)\r\n\t\telse:\r\n\t\t\tself._isRevitLink = False\r\n\t\t\treturn RenderNodeAction.Skip\r\n\t\t\t\r\n\t\tif self._isRevitLink:\r\n\t\t\tself.data[category][name] = {}\r\n\t\t\tfor cat in self._linkCategory:\r\n\t\t\t\tself.data[category][name][str(cat)] = {}\r\n\t\t\r\n\t\t#self._data[\"RVT Links\"][name] = {}\r\n\t\t#self._data[category]\r\n\t\t\r\n\t\t\r\n\t\treturn RenderNodeAction.Proceed\r\n\t\t\r\n\t\t\r\n\tdef OnLinkEnd(self, node):\r\n\t\tself.doc = self._primaryDocument\r\n\t\tself._currentLink = {\"name\":\"\", \"category\":\"\"}\r\n\t\tself._isRevitLink = False\r\n\t\tself.transformationStack.Pop()\r\n\t\tprint \"endLink\"\r\n\t\t\r\n\t\r\n\tdef OnElementBegin(self, elementId):\r\n\t\tself._currentFamilyElement = {\"name\" : \"\", \"category\" : \"\", \"materials\": [] }\r\n\t\tself._currentMaterialId = \"-1\"\r\n\t\telement = self.doc.GetElement(elementId)\r\n\t\tcategory = element.Category.Name.ToString()\r\n\t\teId = elementId.IntegerValue.ToString()\r\n\t\tlevel = self.doc.GetElement(element.LevelId)\r\n\t\t\r\n\t\tif level:\r\n\t\t\tlevelName = level.Name\r\n\t\telse:\r\n\t\t\tlevelName = None\r\n\t\t\t\r\n\t\tif self._isRevitLink:\r\n\t\t\tif category in self._linkCategory:\r\n\t\t\t\ttry:\r\n\t\t\t\t\tfamilyName = element.Symbol.FamilyName.ToString()\r\n\t\t\t\texcept:\r\n\t\t\t\t\tfamilyName = \"\"\r\n\t\t\t\ttypeOfElement = element.Name.ToString()\r\n\t\t\t\tself._currentMaterialId = -1\r\n\t\t\t\tself._currentLinkElement[\"name\"] = eId\r\n\t\t\t\tself._currentLinkElement[\"category\"] = category\r\n\t\t\t\tself._currentLinkElement[\"materials\"] = []\r\n\t\t\t\tlinkCategory = self._currentLink[\"category\"]\r\n\t\t\t\tlinkName = self._currentLink[\"name\"]\r\n\t\t\t\tself.data[linkCategory][linkName][category][eId] = {}\r\n\t\t\t\ttry:\r\n\t\t\t\t\t\r\n\t\t\t\t\tprint element.GetTransform().Origin\r\n\t\t\t\t\torigin = [element.GetTransform().Origin[idx] for idx in range(3)]\r\n\t\t\t\t\t\r\n\t\t\t\texcept Exception as e:\r\n\t\t\t\t\tprint e\r\n\t\t\t\t\torigin = [0,0,0]\r\n\t\t\t\tself.data[linkCategory][linkName][category][eId][\"data\"] = {\"category\": category, \"family\": familyName, \"type\":typeOfElement, \"elementId\": eId, \"levelName\":levelName, \"center\": origin}\r\n\t\t\t\treturn RenderNodeAction.Proceed\r\n\t\t\telse:\r\n\t\t\t\t\r\n\t\t\t\treturn RenderNodeAction.Skip\r\n\t\t\t\t\r\n\t\tif category == \"RVT Links\":\r\n\t\t\treturn RenderNodeAction.Proceed\r\n\t\t\r\n\t\t\t\r\n\t\tif category in [\"Stairs\", \"Curtain Panels\", \"Curtain Wall Mullions\", \"Railings\", \"Top Rails\", \"Ramps\", \"Structural Framing\"] or category in self._MEPList or (element.GetType().ToString() in [\"Autodesk.Revit.DB.FamilyInstance\"] and category in [\"Floors\", \"Walls\"]) or category in [\"Parts\"]:\r\n\t\t\ttry:\r\n\t\t\t\tfamilyName = element.Symbol.FamilyName.ToString()\r\n\t\t\texcept:\r\n\t\t\t\tfamilyName = \"\"\r\n\t\t\tname = eId\r\n\t\t\ttypeOfElement = element.Name.ToString()\r\n\t\t\tif category in [\"Floors\", \"Walls\",\"Parts\"]:\r\n\t\t\t\tcategory = \"Mass\"\r\n\t\t\tself.data[category][eId] = { }\r\n\t\t\tself._currentFamilyElement[\"name\"] = eId\r\n\t\t\tself._currentFamilyElement[\"category\"] = category\r\n\t\t\tself.data[category][name] = {}\r\n\t\t\ttry:\r\n\t\t\t\torigin = self.getCenterFromBoundingBox(element, category)\r\n\t\t\t\t#print origin\r\n\t\t\texcept Exception as e:\r\n\t\t\t\torigin = [0,0,0]\r\n\t\t\tself.data[category][name][\"data\"] = { \"category\": category, \"family\": familyName, \"type\":typeOfElement, \"elementId\": eId, \"levelName\":levelName, \"center\":origin  }\r\n\t\t\treturn RenderNodeAction.Proceed\r\n\t\t\r\n\t\telif category == \"Walls\":\r\n\t\t\ttry:\r\n\t\t\t\tbaseLine = element.Location.Curve\r\n\t\t\texcept: \r\n\t\t\t\treturn RenderNodeAction.Skip\r\n\t\t\tif isinstance(baseLine, Arc):\r\n\t\t\t\ttry:\r\n\t\t\t\t\tfamilyName = element.Symbol.FamilyName.ToString()\r\n\t\t\t\texcept:\r\n\t\t\t\t\tfamilyName = \"\"\r\n\t\t\t\tname = eId\r\n\t\t\t\ttypeOfElement = element.Name.ToString()\r\n\t\t\t\tself.data[category][eId] = { }\r\n\t\t\t\tself._currentFamilyElement[\"name\"] = eId\r\n\t\t\t\tself._currentFamilyElement[\"category\"] = category\r\n\t\t\t\tself.data[category][name] = {}\r\n\t\t\t\ttry:\r\n\t\t\t\t\torigin = self.getCenterFromBoundingBox(element, category)\r\n\t\t\t\t\t#print origin\r\n\t\t\t\texcept Exception as e:\r\n\t\t\t\t\torigin = [0,0,0]\r\n\t\t\t\tself.data[category][name][\"data\"] = { \"category\": category, \"family\": familyName, \"type\":typeOfElement, \"elementId\": eId, \"levelName\":levelName, \"center\":origin  }\r\n\t\t\t\t\r\n\t\t\t\t#print baseLine\r\n\t\t\t\treturn RenderNodeAction.Proceed\r\n\t\t\telse:\r\n\t\t\t\treturn RenderNodeAction.Skip\r\n\t\t\t\r\n\t\telif category == \"Structural Columns\" or category == \"Columns\":\r\n\t\t\ttry:\r\n\t\t\t\tfamilyName = element.Symbol.FamilyName.ToString()\r\n\t\t\texcept:\r\n\t\t\t\tfamilyName = \"\"\r\n\t\t\tname = eId\r\n\t\t\ttypeOfElement = element.Name.ToString()\r\n\t\t\tself.data[category][eId] = { }\r\n\t\t\tself._currentFamilyElement[\"name\"] = eId\r\n\t\t\tself._currentFamilyElement[\"category\"] = category\r\n\t\t\tself.data[category][name] = {}\r\n\t\t\tself.data[category][name][\"data\"] = { \"category\": category, \"family\": familyName, \"type\":typeOfElement, \"elementId\": eId, \"levelName\":levelName }\r\n\t\t\tcolumnBottomFace, height, materialInfo, noOfFaces, normal = self.handleColumns(element)\r\n\t\t\tself.data[category][name][\"data\"][\"height\"] = height\r\n\t\t\tself.data[category][name][\"data\"][\"bottomFace\"] =  columnBottomFace\r\n\t\t\tself.data[category][name][\"data\"][\"materialInfo\"] = materialInfo\r\n\t\t\tself.data[category][name][\"data\"][\"createWithGeometry\"] = True if noOfFaces > 1 else False\r\n\t\t\tself.data[category][name][\"data\"][\"normal\"] = normal\r\n\t\t\ttry:\r\n\t\t\t\torigin = self.getCenterFromBoundingBox(element, category)\r\n\t\t\t\t#print origin\r\n\t\t\texcept Exception as e:\r\n\t\t\t\torigin = [0,0,0]\r\n\t\t\tself.data[category][name][\"data\"][\"center\"] = origin\r\n\t\t\t\r\n\t\t\tif noOfFaces > 1:\r\n\t\t\t\treturn RenderNodeAction.Proceed\r\n\t\t\telse:\r\n\t\t\t\treturn RenderNodeAction.Skip\r\n\t\t\t\r\n\t\t\t\r\n\t\t\r\n\t\telif category in self._categoryList:\r\n\t\t\tcenter = self.getCenterFromBoundingBox(element, category)\r\n\t\t\tfamily, typeofElement = self.getFamilyAndType(element)\r\n\t\t\tbasePoint = [0,0,0]\r\n\t\t\trotation = 0\r\n\t\t\tisFaceFlipped = None\r\n\t\t\twidth = 0\r\n\t\t\theight = 0\r\n\t\t\toffset = 0\r\n\t\t\tlength = 0\r\n\t\t\ttry:\r\n\t\t\t\tbasePoint, rotation, isFaceFlipped, isHandFlipped, width, height, offset, length = self.getRequiredPropertiesFromElement(element, category)\r\n\t\t\texcept Exception as e:\r\n\t\t\t\tprint e\r\n\t\t\t\r\n\t\t\tsuperComponent = None\r\n\t\t\ttry: # normal furniture or furniture system\r\n\t\t\t\tsuperComponent = element.SuperComponent.Id\r\n\t\t\texcept:\r\n\t\t\t\tpass\r\n\t\t\t\t\r\n\t\t\tif not superComponent:# for assemblies\r\n\t\t\t\ttry:\r\n\t\t\t\t\tsuperComponent = None if element.AssemblyInstanceId.ToString() == \"-1\" else element.AssemblyInstanceId\r\n\t\t\t\texcept:\r\n\t\t\t\t\tpass\r\n\t\t\tif not superComponent: # for model groups\r\n\t\t\t\ttry:\r\n\t\t\t\t\tsuperComponent = None if element.GroupId.ToString() == \"-1\" else element.GroupId\r\n\t\t\t\texcept:\r\n\t\t\t\t\tpass\r\n\t\t\ttry:\r\n\t\t\t\tif superComponent and category in [\"Doors\", \"Windows\"]:\r\n\t\t\t\t\tsuperCategory = self.doc.GetElement(superComponent).Category.Name.ToString()\r\n\t\t\t\t\tif superCategory not in [\"Doors\", \"Windows\"]:\r\n\t\t\t\t\t\tsuperComponent = None\r\n\t\t\texcept Exception as e:\r\n\t\t\t\tprint e\r\n\t\t\tif not superComponent:\r\n\t\t\t\tif category in [\"Assemblies\", \"Model Groups\"]:\r\n\t\t\t\t\tsubComponents = [elem.ToString() for elem in element.GetDependentElements(None)]\r\n\t\t\t\telse:\r\n\t\t\t\t\ttry: \r\n\t\t\t\t\t\tsubComponents = [elem.ToString() for elem in element.GetSubComponentIds()]\r\n\t\t\t\t\texcept:\r\n\t\t\t\t\t\tsubComponents = []\r\n\t\t\t\tself.creationData[category][eId] = {\"subComponents\" : subComponents}\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\ttry:\r\n\t\t\t\tisMirrored = element.Mirrored\r\n\t\t\texcept:\r\n\t\t\t\tisMirrored = False\r\n\t\t\t\r\n\t\t\tself.data[category][eId] = {\"basePoint\": basePoint, \"rotation\": rotation, \"isFaceFlipped\": isFaceFlipped,\"width\":width, \"height\": height, \"family\": family, \"type\": typeofElement,\"bbCenter\": center, \"category\": category, \"offset\": offset, \"length\": length, \"levelName\":levelName, \"mirrored\": isMirrored, \"isHandFlipped\":isHandFlipped  }\r\n\t\t\t\r\n\t\t\tif category in [\"Doors\",\"Windows\"] and not element.GetType().ToString() == DIRECTSHAPE :\r\n\t\t\t\t\r\n\t\t\t\tself.data[category][eId][\"HandOrientation\"] = [element.HandOrientation[idx] for idx in range(3)]\r\n\t\t\t\t\r\n\t\t\t\tself.data[category][eId][\"FacingOrientation\"] = [element.FacingOrientation[idx] for idx in range(3)]\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\tname = self.getNameForFamilyInstance(typeofElement, family,width, height, isFaceFlipped)\r\n\t\t\t\r\n\t\t\topt = Options()\r\n\t\t\topt.View = doc.ActiveView\r\n\t\t\tgeometry =  element.get_Geometry(opt)\r\n\t\t\ttotalFaces = 0\r\n\t\t\tfor geo in geometry:\r\n\t\t\t\tif isinstance(geo, Solid):\r\n\t\t\t\t\ttotalFaces += geo.Faces.Size\r\n\t\t\t\tif isinstance(geo, GeometryInstance ):\r\n\t\t\t\t\tinstanceGeometry = geo.GetInstanceGeometry()\r\n\t\t\t\t\tfor instanceGeom in instanceGeometry:\r\n\t\t\t\t\t\tif( isinstance(instanceGeom, Solid)):\r\n\t\t\t\t\t\t\ttotalFaces += instanceGeom.Faces.Size\t\t\t\t\t\t\t\r\n\t\t\ttry:\r\n\t\t\t\tpreviousTotalFaces = self.familyData[category][name][\"data\"][\"totalFaces\"]\r\n\t\t\texcept : \r\n\t\t\t\tpreviousTotalFaces = 0\r\n\t\t\tif totalFaces > previousTotalFaces or (totalFaces == 0 and previousTotalFaces == 0):\r\n\t\t\t\tself._currentFamilyElement[\"name\"] = name\r\n\t\t\t\tself._currentFamilyElement[\"category\"] = category\r\n\t\t\t\tself._familyList.add(name)\r\n\t\t\t\tself.familyData[category][name] = {}\r\n\t\t\t\tself.familyData[category][name][\"data\"] = {\"rotation\": rotation, \"isFaceFlipped\": isFaceFlipped, \"basePoint\": basePoint, \"bbCenter\": center, \"totalFaces\": totalFaces, \"mirrored\": isMirrored, \"isHandFlipped\":isHandFlipped }\r\n\t\t\t\treturn RenderNodeAction.Proceed\r\n\t\t\telse:\r\n\t\t\t\treturn RenderNodeAction.Skip\r\n\t\t\r\n\t\t\t\t\r\n\t\telif category in [\"Floors\", \"Autodesk.Revit.DB.Floor\"] and element.GetType().ToString() in [\"Floors\", \"Autodesk.Revit.DB.Floor\"] :\r\n\t\t\ttypeOfFloor = element.Name.ToString()\r\n\t\t\ttry:\r\n\t\t\t\tfamily = element.LookupParameter(\"Family\").AsValueString()\r\n\t\t\texcept:\r\n\t\t\t\tfamily = \"\"\r\n\t\t\tlevel = self.doc.GetElement(element.LevelId)\r\n\t\t\tif level:\r\n\t\t\t\tlevelName = level.Name\r\n\t\t\telse:\r\n\t\t\t\tlevelName = None\r\n\t\t\ttry:\r\n\t\t\t\tbottomProfileRef =  HostObjectUtils.GetBottomFaces(element)\r\n\t\t\texcept Exception as e:\r\n\t\t\t\tprint e\r\n\t\t\t\treturn RenderNodeAction.Skip\r\n\t\t\tisVoidsPresent = False\r\n\t\t\tbottomProfile = element.GetGeometryObjectFromReference(bottomProfileRef[0])\r\n\t\t\tFaceNormal =  bottomProfile.FaceNormal\r\n\t\t\topt = Options()\r\n\t\t\topt.View = self.doc.ActiveView\r\n\t\t\tgeometry = element.get_Geometry(opt)\r\n\t\t\tsortedCurveLoops = []\r\n\t\t\tisDifferentCurve = False\r\n\t\t\tfor geo in geometry:\r\n\t\t\t\tif isinstance(geo, Solid):\r\n\t\t\t\t\tfor f in geo.Faces:\r\n\t\t\t\t\t\ttry:\r\n\t\t\t\t\t\t\tcurrentFaceNormal = f.FaceNormal\r\n\t\t\t\t\t\texcept:\r\n\t\t\t\t\t\t\tcurrentFaceNormal = [0,0,0]\r\n\t\t\t\t\t\tareSameNormal = currentFaceNormal[2] ==  FaceNormal[2] and currentFaceNormal[1] ==  FaceNormal[1] and currentFaceNormal[0] ==  FaceNormal[0] \r\n\t\t\t\t\t\tif areSameNormal:\r\n\t\t\t\t\t\t\tcurveLoops = f.GetEdgesAsCurveLoops()\r\n\t\t\t\t\t\t\tsortedCurveLoops = ExporterIFCUtils.SortCurveLoops(curveLoops)\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tcurvesMap = {}\r\n\t\t\t\t\t\t\tvoidsMap = {}\r\n\t\t\t\t\t\t\tfor sortedcurveLoop in sortedCurveLoops:\r\n\t\t\t\t\t\t\t\tcurveLoop = sortedcurveLoop[0]\r\n\t\t\t\t\t\t\t\tcurveData = []\r\n\t\t\t\t\t\t\t\tcurveIds = []\r\n\t\t\t\t\t\t\t\tcurveKey = []\r\n\t\t\t\t\t\t\t\tfor cl in curveLoop.GetCurveLoopIterator():\r\n\t\t\t\t\t\t\t\t\tif isinstance(cl, Arc) or isinstance(cl, NurbSpline): \r\n\t\t\t\t\t\t\t\t\t\tisDifferentCurve = isinstance(cl, NurbSpline) or isDifferentCurve\r\n\t\t\t\t\t\t\t\t\t\tpoints = cl.Tessellate()\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\tfor i in range(len(points)-1):\r\n\t\t\t\t\t\t\t\t\t\t\t#print \"arc\", [points[i][idx] for idx in range(3)]\r\n\t\t\t\t\t\t\t\t\t\t\tcurveData.append([points[i][idx]* FOOT_TO_MM for idx in range(3)])\r\n\t\t\t\t\t\t\t\t\t\tcurveKey.append(\"[\"+\", \".join([str(int(cl.GetEndPoint(0)[idx])) for idx in range(2)])+\"]\")\r\n\t\t\t\t\t\t\t\t\telif isinstance(cl, Line):\r\n\t\t\t\t\t\t\t\t\t\t#print [cl.GetEndPoint(0)[idx] for idx in range(3)]\r\n\t\t\t\t\t\t\t\t\t\tcurveData.append([cl.GetEndPoint(0)[idx]* FOOT_TO_MM for idx in range(3)])\r\n\r\n\t\t\t\t\t\t\t\t\t\tcurveKey.append(\"[\"+\", \".join([str(int(cl.GetEndPoint(0)[idx])) for idx in range(2)])+\"]\")\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tcurveKey.sort()\t\r\n\t\t\t\t\t\t\t\tcurveKey = '['+\", \".join(curveKey)+']' + eId\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tcurvesMap[str(curveKey)] = curveData\t\r\n\t\t\t\t\t\t\t\tif len(sortedcurveLoop) > 1:\t\r\n\t\t\t\t\t\t\t\t\tvoidsMap[curveKey] = {}\r\n\t\t\t\t\t\t\t\tfor voidLoopId in range(1,len(sortedcurveLoop)):\r\n\t\t\t\t\t\t\t\t\tvoidLoop = sortedcurveLoop[voidLoopId]\r\n\t\t\t\t\t\t\t\t\t#print voidLoop\r\n\t\t\t\t\t\t\t\t\tisVoidsPresent = True\r\n\t\t\t\t\t\t\t\t\tvoidsData = []\r\n\t\t\t\t\t\t\t\t\tvoidKey = []\r\n\t\t\t\t\t\t\t\t\tfor cl in voidLoop.GetCurveLoopIterator():\r\n\t\t\t\t\t\t\t\t\t\ttry:\r\n\t\t\t\t\t\t\t\t\t\t\tif isinstance(cl, Arc): \r\n\t\t\t\t\t\t\t\t\t\t\t\tpoints = cl.Tessellate()\r\n\t\t\t\t\t\t\t\t\t\t\t\tfor i in range(len(points)-1):\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tvoidsData.append([points[i][idx]* FOOT_TO_MM for idx in range(3)])\r\n\t\t\t\t\t\t\t\t\t\t\t\tvoidKey.append(\"[\"+\", \".join([str(int(cl.GetEndPoint(0)[idx])) for idx in range(2)])+\"]\")\r\n\t\t\t\t\t\t\t\t\t\t\t\tcontinue\r\n\t\t\t\t\t\t\t\t\t\texcept Exception as e:\r\n\t\t\t\t\t\t\t\t\t\t\tprint e\r\n\t\t\t\t\t\t\t\t\t\t\tcontinue\r\n\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\tvoidsData.append([cl.GetEndPoint(0)[idx]* FOOT_TO_MM for idx in range(3)])\r\n\t\t\t\t\t\t\t\t\t\tvoidKey.append(\"[\"+\", \".join([str(int(cl.GetEndPoint(0)[idx])) for idx in range(2)])+\"]\")\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\tvoidKey.sort()\t\t\t\t\r\n\t\t\t\t\t\t\t\t\tvoidKey = '['+\", \".join(voidKey)+']' + eId\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\tvoidsMap[curveKey][voidKey] = voidsData\r\n\t\t\t\t\t\t\t\t\r\n\r\n\t\t\tif(len(sortedCurveLoops) > 0):\r\n\t\t\t\tself.familyData[category][eId] = { }\r\n\t\t\t\tself._currentFamilyElement[\"name\"] = eId\r\n\t\t\t\tself._currentFamilyElement[\"category\"] = category\r\n\t\t\t\tself.familyData[category][eId] = {\"outline\":curvesMap, \"voids\":voidsMap, \"type\":typeOfFloor, \"family\":family, \"level\":levelName }\r\n\t\t\t\tif isVoidsPresent or isDifferentCurve:\r\n\t\t\t\t\treturn RenderNodeAction.Proceed\r\n\t\t\t\telse:\r\n\t\t\t\t\treturn RenderNodeAction.Skip\r\n\t\t\telse:\r\n\t\t\t\treturn RenderNodeAction.Skip\r\n\t\t\t\r\n\t\telse:\r\n\t\t\treturn RenderNodeAction.Skip\r\n\t\t\r\n\t\t\r\n\t\t\t\r\n\t\t\r\n\t\t\t\r\n\tdef handleFace(self, f):\r\n\t\tfaceVertices = []\r\n\t\tedges = f.GetEdgesAsCurveLoops()\r\n\t\tedges = ExporterIFCUtils.SortCurveLoops(edges)\r\n\t\tfor e in edges:\r\n\t\t\tfor cl in e.GetCurveLoopIterator():\r\n\t\t\t\ttry:\r\n\t\t\t\t\tif isinstance(cl, Arc):\r\n\t\t\t\t\t\tpoints = cl.Tessellate()\r\n\t\t\t\t\t\tfor point in points:\r\n\t\t\t\t\t\t\tfaceVertices.append([point[idx]* FOOT_TO_MM for idx in range(3)])\r\n\t\t\t\t\telse:\r\n\t\t\t\t\t\tfaceVertices.append([cl.GetEndPoint(0)[idx]* FOOT_TO_MM for idx in range(3)])\r\n\t\t\t\texcept Exception as e:\r\n\t\t\t\t\tprint e\t\r\n\t\treturn faceVertices\r\n\r\n\t\t\r\n\tdef OnElementEnd(self, elementId):\r\n\t\tpass\r\n\t\r\n\tdef OnInstanceBegin(self, node):\r\n\t\tself.transformationStack.Push( self.CurrentTransform().Multiply(node.GetTransform()))\r\n\t\treturn RenderNodeAction.Proceed\r\n\t\t\r\n\t\r\n\tdef OnInstanceEnd(self, node):\r\n\t\tself.transformationStack.Pop()\r\n\t\t\r\n\tdef OnFaceBegin(self, node):\r\n\t\treturn RenderNodeAction.Proceed\r\n\t\r\n\tdef OnFaceEnd(self, node):\r\n\t\tpass\r\n\t\t\r\n\tdef OnLight(self, node):\r\n\t\tpass\r\n\t\t\r\n\tdef OnRPC(self, node):\r\n\t\tpass\r\n\t\t\r\n\tdef OnMaterial(self, node):\r\n\t\tmaterialId = node.MaterialId.ToString()\r\n\t\tself._currentMaterialId = materialId\r\n\t\tname = self._currentFamilyElement[\"name\"]\r\n\t\tcategory = self._currentFamilyElement[\"category\"]\r\n\t\r\n\t\tif self._isRevitLink:\r\n\t\t\tname = self._currentLinkElement[\"name\"]\r\n\t\t\tcategory = self._currentLinkElement[\"category\"]\r\n\t\t\tlinkCategory = self._currentLink[\"category\"]\r\n\t\t\tlinkName = self._currentLink[\"name\"]\r\n\t\t\tif materialId not in self._currentLinkElement[\"materials\"]:\r\n\t\t\t\tself._currentLinkElement[\"materials\"].append(node.MaterialId.ToString())\r\n\t\t\t\tself.data[linkCategory][linkName][category][name][materialId] = {}\r\n\t\t\t\tself.data[linkCategory][linkName][category][name][materialId][\"materialInfo\"] = {}\r\n\t\t\t\tmaterial = self.doc.GetElement(node.MaterialId)\r\n\t\t\t\tif material:\r\n\t\t\t\t\ttry:\r\n\t\t\t\t\t\tvalue = self.GetMaterialInfo(material)\r\n\t\t\t\t\t\t\r\n\t\t\t\t\texcept:\r\n\t\t\t\t\t\tvalue = None\r\n\t\t\t\t\t#self._data[category][name][materialId][\"materialInfo\"][\"type\"] = typeMat\r\n\t\t\t\t\tself.data[linkCategory][linkName][category][name][materialId][\"materialInfo\"][\"value\"] = value\r\n\t\t\t\telse:\r\n\t\t\t\t\t# if material is not there, get consistent color\r\n\t\t\t\t\tc = node.Color\r\n\t\t\t\t\tself.data[linkCategory][linkName][category][name][materialId][\"materialInfo\"][\"value\"] = {\"diffuseColor\":[int(c.Red), int(c.Green), int(c.Blue),node.Transparency ]}\r\n\t\t\t\t\t\r\n\t\telif materialId not in self._currentFamilyElement[\"materials\"] and (category in [\"Stairs\", \"Curtain Panels\", \"Curtain Wall Mullions\",\"Railings\", \"Top Rails\", \"Ramps\", \"Structural Framing\", \"Columns\", \"Walls\", \"Structural Columns\"] or category in self._MEPList or (category == \"Mass\")):\r\n\t\t\tself._currentFamilyElement[\"materials\"].append(materialId)\r\n\t\t\tself.data[category][name][materialId] = {}\r\n\t\t\tself.data[category][name][materialId][\"materialInfo\"] = {}\r\n\t\t\tmaterial = self.doc.GetElement(node.MaterialId)\r\n\t\t\tif material:\r\n\t\t\t\ttry:\r\n\t\t\t\t\tvalue = self.GetMaterialInfo(material)\r\n\t\t\t\texcept:\r\n\t\t\t\t\tvalue = None\r\n\t\t\t\tself.data[category][name][materialId][\"materialInfo\"][\"value\"] = value\r\n\t\t\telse:\r\n\t\t\t\t# if material is not there, get consistent color\r\n\t\t\t\tc = node.Color\r\n\t\t\t\tself.data[category][name][materialId][\"materialInfo\"][\"value\"] = {\"diffuseColor\":[int(c.Red), int(c.Green), int(c.Blue),node.Transparency ]}\r\n\t\t\t\r\n\t\t\r\n\t\telif materialId not in self._currentFamilyElement[\"materials\"] and category in self._categoryList:\r\n\t\t\tself._currentFamilyElement[\"materials\"].append(materialId)\r\n\t\t\tself.familyData[category][name][materialId] = {}\r\n\t\t\tself.familyData[category][name][materialId][\"materialInfo\"] = {}\r\n\t\t\tmaterial = self.doc.GetElement(node.MaterialId)\r\n\t\t\tif material:\r\n\t\t\t\ttry:\r\n\t\t\t\t\tvalue = self.GetMaterialInfo(material)\r\n\t\t\t\texcept Exception as e:\r\n\t\t\t\t\tprint e\r\n\t\t\t\t\tvalue = None\r\n\t\t\t\tself.familyData[category][name][materialId][\"materialInfo\"][\"value\"] = value\r\n\t\t\telse:\r\n\t\t\t\t# if material is not there, get consistent color\r\n\t\t\t\tc = node.Color\r\n\t\t\t\tself.familyData[category][name][materialId][\"materialInfo\"][\"value\"] = {\"diffuseColor\":[int(c.Red), int(c.Green), int(c.Blue),node.Transparency ]}\r\n\t\t\t\r\n\t\t\r\n\tdef OnPolymesh(self, node):\r\n\t\tname = self._currentFamilyElement[\"name\"]\r\n\t\tcategory = self._currentFamilyElement[\"category\"]\r\n\t\tmaterialId = self._currentMaterialId\r\n\t\t# add geometry data according to the material division\r\n\t\tif self._isRevitLink:\r\n\t\t\tname = self._currentLinkElement[\"name\"]\r\n\t\t\tcategory = self._currentLinkElement[\"category\"]\r\n\t\t\tlinkCategory = self._currentLink[\"category\"]\r\n\t\t\tlinkName = self._currentLink[\"name\"]\r\n\t\t\tif \"vertices\" not in self.data[linkCategory][linkName][category][name][materialId].keys():\r\n\t\t\t\tself.initizializeGeometryData(self.data[linkCategory][linkName][category][name][materialId])\r\n\t\t\t\r\n\t\t\ttotalFacet = len(self.data[linkCategory][linkName][category][name][materialId][\"vertices\"])\r\n\t\t\tself.getGeometryData(self.data[linkCategory][linkName][category][name][materialId], node, totalFacet, category)\r\n\t\t\t\r\n\t\t\t\r\n\t\telif (category in [\"Stairs\", \"Curtain Panels\", \"Curtain Wall Mullions\",\"Railings\", \"Top Rails\", \"Ramps\", \"Structural Framing\", \"Columns\", \"Walls\", \"Structural Columns\"] or category in self._MEPList or (category == \"Mass\")):\r\n\t\t\tif \"vertices\" not in self.data[category][name][materialId].keys():\r\n\t\t\t\tself.initizializeGeometryData(self.data[category][name][materialId])\r\n\t\t\t\r\n\t\t\ttotalFacet = len(self.data[category][name][materialId][\"vertices\"])\r\n\t\t\tself.getGeometryData(self.data[category][name][materialId], node, totalFacet, category)\r\n\t\t\t\r\n\t\t\r\n\t\telif category in self._categoryList:\r\n\t\t\tif \"vertices\" not in self.familyData[category][name][materialId].keys():\r\n\t\t\t\tself.initizializeGeometryData(self.familyData[category][name][materialId])\r\n\t\t\t\r\n\t\t\ttotalFacet = len(self.familyData[category][name][materialId][\"vertices\"])\r\n\t\t\tself.getGeometryData(self.familyData[category][name][materialId], node, totalFacet, category)\r\n\t\telif category in [\"Floors\"]:\r\n\t\t\tif \"vertices\" not in self.familyData[category][name].keys():\r\n\t\t\t\tself.initizializeGeometryData(self.familyData[category][name])\r\n\t\t\ttotalFacet = len(self.familyData[category][name][\"vertices\"])\r\n\t\t\tself.getGeometryData(self.familyData[category][name], node, totalFacet, category)\r\n\t\t\t\r\n\t\t\t\r\n\t\t\r\n\t\t\r\n\tdef CurrentTransform(self):\r\n\t\treturn self.transformationStack.Peek()\r\n\t\t\r\n\tdef initizializeGeometryData(self, object):\r\n\t\tobject[\"vertices\"] = []\r\n\t\tobject[\"faces\"] = []\r\n\t\tobject[\"uvs\"] = []\r\n\t\t\r\n\tdef getGeometryData(self, object, node, totalFacet, category):\r\n\t\tcurrentTransform = self.CurrentTransform()\r\n\t\tfor point in node.GetPoints():\r\n\t\t\t#print point \r\n\t\t\tif (category == \"Doors\") and not self._isRevitLink :\r\n\t\t\t\tobject[\"vertices\"].append([point[i] for i in range(3)])\r\n\t\t\telse:\r\n\t\t\t\ttp = currentTransform.OfPoint(point)\r\n\t\t\t\tobject[\"vertices\"].append([tp[i] for i in range(3)])\r\n\t\t\t\t\r\n\t\tfor uv in node.GetUVs():\r\n\t\t\tobject[\"uvs\"].append([uv[i]for i in range(2)])\r\n\t\t\t\r\n\t\tfor facet in node.GetFacets():\r\n\t\t\tobject[\"faces\"].append([facet.V1+totalFacet, facet.V2+totalFacet,facet.V3+totalFacet])\r\n\t\t\r\n\t\t\r\n\tdef getNameForFamilyInstance(self, type, family,width, height, isFaceFlipped):\r\n\t\tname = type\r\n\t\tif family:\r\n\t\t\tname += \" \" + family\r\n\t\tif width:\r\n\t\t\tname += \"-\" + str(int(width))\r\n\t\tif height:\r\n\t\t\tname += \"x\" + str(int(height))\r\n\t\tif isFaceFlipped != None:\r\n\t\t\tname += \"-1\" if isFaceFlipped else \"-0\"\r\n\t\t\t\r\n\t\treturn name\r\n\t\t\r\n\t\t\r\n\tdef getFamilyAndType(self, element):\r\n\t\ttry:\r\n\t\t\tfamilyName = element.Symbol.FamilyName.ToString()\r\n\t\texcept:\r\n\t\t\tfamilyName = None\r\n\t\ttypeOfElement = element.Name.ToString()\r\n\t\t\r\n\t\treturn familyName, typeOfElement\r\n\t\t\r\n\t\t\r\n\tdef getRequiredPropertiesFromElement(self, element, category):\r\n\t\tlocation = element.Location\r\n\t\tbasePoint = [0,0,0]\r\n\t\t\r\n\t\t\r\n\t\ttry:\r\n\t\t\ttransform = element.GetTransform()\r\n\t\t\tvec_x = transform.BasisX\r\n\t\t\t# Reference: https://stackoverflow.com/questions/1996957/conversion-euler-to-matrix-and-matrix-to-euler\r\n\t\t\teuler_x = (2*pi) - math.asin(transform.BasisY.Z)\r\n\t\t\trotationX = euler_x\r\n\t\t\tif (math.cos(euler_x) > 0.0001): \r\n\t\t\t\trotation = (2*pi) - math.atan2(transform.BasisY.X,transform.BasisY.Y)\r\n\t\t\telse:\r\n\t\t\t\trotation = (2*pi) - math.atan2(-transform.BasisX.Y,transform.BasisX.X)\r\n\t\t\t\t\r\n\t\t\t\r\n\t\t\tif(isinstance(location, LocationPoint)):\r\n\t\t\t\tbasePoint = [location.Point[idx] for idx in range(3)]\r\n\t\t\t\t\r\n\t\t\tif category == \"Doors\":\r\n\t\t\t\tbasePoint = [element.GetTotalTransform().Origin[idx] for idx in range(3)]\r\n\t\t\t\tif(isinstance(location, LocationPoint)):\r\n\t\t\t\t\trotation = location.Rotation\r\n\t\t\t\t\t#print rotation\r\n\t\t\t\r\n\t\texcept Exception as e:\r\n\t\t\t#print e\r\n\t\t\ttry: \r\n\t\t\t\tif(isinstance(location, LocationPoint)):\r\n\t\t\t\t\tbasePoint = [location.Point[idx] for idx in range(3)]\r\n\t\t\t\t\trotation = location.Rotation\r\n\t\t\t\telse:\r\n\t\t\t\t\trotation = 0\r\n\t\t\texcept Exception as e:\r\n\t\t\t\t#print e\r\n\t\t\t\trotation = 0\r\n\t\t\r\n\t\ttry:\r\n\t\t\tisFaceFlipped = element.FacingFlipped\r\n\t\texcept Exception as e:\r\n\t\t\tisFaceFlipped = False\r\n\t\t\t#print e\r\n\t\ttry:\r\n\t\t\tisHandFlipped = element.HandFlipped\r\n\t\texcept Exception as e:\r\n\t\t\tisHandFlipped = False\r\n\t\theight = element.get_Parameter(BuiltInParameter.DOOR_HEIGHT)\r\n\t\twidth = element.get_Parameter(BuiltInParameter.FURNITURE_WIDTH)\r\n\t\tif width:\r\n\t\t\tif width.AsDouble() != 0:\r\n\t\t\t\twidth =width.AsDouble() * FOOT_TO_MM\r\n\t\t\telif element.Symbol.LookupParameter(\"Width\").AsDouble() != 0:\r\n\t\t\t\twidth = element.Symbol.LookupParameter(\"Width\").AsDouble()\r\n\t\t\t\twidth = width * FOOT_TO_MM\r\n\t\t\telse:\r\n\t\t\t\twidth = None\r\n\t\tif height:\r\n\t\t\tif height.AsDouble() != 0:\r\n\t\t\t\theight = height.AsDouble() * FOOT_TO_MM\r\n\t\t\telif element.Symbol.LookupParameter(\"Height\").AsDouble() != 0:\r\n\t\t\t\theight = element.Symbol.LookupParameter(\"Height\").AsDouble()\r\n\t\t\t\theight =height * FOOT_TO_MM\r\n\t\t\t\t\r\n\t\t\telse:\r\n\t\t\t\theight = None\r\n\t\t\t\t\r\n\t\toffset = 0\r\n\t\toffsetProperty = element.LookupParameter(\"Offset\")\r\n\t\tif element.LookupParameter(\"Offset\"):\r\n\t\t\toffset = element.LookupParameter(\"Offset\").AsDouble()\r\n\t\telif element.LookupParameter(\"Offset from Host\"):\r\n\t\t\toffset = element.LookupParameter(\"Offset from Host\").AsDouble()\r\n\t\tlength = None\r\n\t\tif element.Category.Name == \"Generic Models\":\r\n\t\t\tif element.LookupParameter(\"WW-Length\"):\r\n\t\t\t\tlength = element.LookupParameter(\"WW-Length\").AsDouble() * FOOT_TO_MM\r\n\t\treturn basePoint, rotation, isFaceFlipped, isHandFlipped, width, height, offset, length\r\n\t\t\t\t\r\n\t\t\r\n\tdef getCenterFromBoundingBox(self, element, category):\r\n\t\tsubComponents = []\r\n\t\t# Check if model group contains any walls and floors\r\n\t\tif category in [\"Model Groups\"]:\r\n\t\t\tdef ExpandToContain(bb, p):\r\n\t\t\t\tbb.Min = XYZ( min( bb.Min.X, p.X ), min( bb.Min.Y, p.Y ), min( bb.Min.Z, p.Z ) );\r\n\t\t\t\tbb.Max = XYZ( max( bb.Min.X, p.X ), max( bb.Max.Y, p.Y ), max( bb.Max.Z, p.Z ) );\r\n\t\t\t\treturn bb\r\n\t\t\tdef checkIfElementIsVisible(element):\r\n\t\t\t\tidRule = ParameterFilterRuleFactory.CreateEqualsRule(ElementId(BuiltInParameter.ID_PARAM), element.Id)\r\n\t\t\t\tidFilter =  ElementParameterFilter(idRule)\r\n\t\t\t\tcat = element.Category\r\n\t\t\t\tcatFilter =  ElementCategoryFilter(cat.Id)\r\n\t\t\t\tcollector = FilteredElementCollector(self.doc, view.Id).WhereElementIsNotElementType().WherePasses(catFilter).WherePasses(idFilter)\r\n\t\t\t\t#debug.append(collector.FirstElement())\r\n\t\t\t\treturn collector.FirstElement()\r\n\t\t\t\t\r\n\t\t\tbb = BoundingBoxXYZ()\r\n\t\t\tisfirstElement = True\r\n\t\t\tisContainsWallsOrFloors = False\r\n\t\t\tsubComponents = element.GetMemberIds()\r\n\t\t\tfor subComponent in subComponents:\r\n\t\t\t\tcat = self.doc.GetElement(subComponent).Category\r\n\t\t\t\tif cat:\r\n\t\t\t\t\tcat = cat.Name.ToString()\r\n\t\t\t\t\t\r\n\t\t\t\tif cat in [\"Walls\", \"Floors\"]:\r\n\t\t\t\t\tisContainsWallsOrFloors = True\r\n\t\t\t\t\tbreak\r\n\t\t\t\r\n\t\t\tif isContainsWallsOrFloors:\r\n\t\t\t\tfor subComponent in subComponents :\t\t\r\n\t\t\t\t\tcurrentElement = self.doc.GetElement(subComponent)\r\n\t\t\t\t\tcat = currentElement.Category\r\n\t\t\t\t\tif cat:\r\n\t\t\t\t\t\tcat = cat.Name.ToString()\r\n\t\t\t\t\t\t\r\n\t\t\t\t\tif cat in self._categoryList and checkIfElementIsVisible(currentElement):\r\n\t\t\t\t\t\tcurrentbb = currentElement.get_BoundingBox(view)\r\n\t\t\t\t\t\tif isfirstElement:\r\n\t\t\t\t\t\t\tbb = currentbb\r\n\t\t\t\t\t\t\tisfirstElement = False\r\n\t\t\t\t\t\telse:\r\n\t\t\t\t\t\t\tbb = ExpandToContain(bb, currentbb.Max )\r\n\t\t\t\t\t\t\tbb = ExpandToContain(bb, currentbb.Min)\r\n\t\t\t\t\t\t\r\n\t\t\t\trightUpperCorner = [bb.Max[idx]*FOOT_TO_MM for idx in range(3)]\r\n\t\t\t\tleftBottomCorner = [bb.Min[idx]*FOOT_TO_MM for idx in range(3)]\r\n\t\t\t\tcenter = []\r\n\t\t\t\tfor idx in range(3):\r\n\t\t\t\t\tcenter.append((rightUpperCorner[idx]+leftBottomCorner[idx])/2)\r\n\t\t\t\treturn center\t\r\n\t\t\r\n\r\n\t\t\r\n\t\tif category not in [ \"Model Groups\", \"Casework\", \"Windows\"]:\r\n\t\t\ttry:\r\n\t\t\t\treturn [element.GetTotalTransform().Origin[idx]*FOOT_TO_MM for idx in range(3)]\r\n\t\t\texcept Exception as e:\r\n\t\t\t\t#print e\r\n\t\t\t\tpass\r\n\r\n\t\t\r\n\t\tif category in [\"Air Terminals\", \"Mechanical Equipment\"]:\r\n\t\t\tlocation = element.Location\r\n\t\t\tif(isinstance(location, LocationPoint)):\t\r\n\t\t\t\tbasePoint = [location.Point[idx]*FOOT_TO_MM for idx in range(3)]\r\n\t\t\t\treturn basePoint\r\n\t\t\r\n\t\t\r\n\t\tif category == \"Doors\":\r\n\t\t\ttry:\r\n\t\t\t\tlocation = element.Location\r\n\t\t\t\tif(isinstance(location, LocationPoint)):\t\r\n\t\t\t\t\tbasePoint = [location.Point[idx]*FOOT_TO_MM for idx in range(3)]\r\n\t\t\t\t\treturn basePoint\r\n\t\t\texcept:\r\n\t\t\t\treturn [element.GetTransform().Origin[idx]*FOOT_TO_MM for idx in range(3)]\r\n\t\ttry:\r\n\t\t\tsubComponents = element.GetSubComponentIds()\r\n\t\texcept:\r\n\t\t\tsubComponents = []\r\n\t\t\t\r\n\t\tif len(subComponents) > 1:\r\n\t\t\tbasepoint = element.Location\r\n\t\t\tif isinstance(basepoint, LocationPoint):\r\n\t\t\t\tbasepoint = [basepoint.Point[idx]*FOOT_TO_MM for idx in range(3)]\r\n\t\t\t\t#print basepoint\r\n\t\t\t\treturn basepoint\r\n\t\t\t\t\r\n\t\tbbox = element.get_BoundingBox(view)\r\n\t\tif bbox :\r\n\t\t\trightUpperCorner = [bbox.Max[idx]*FOOT_TO_MM for idx in range(3)]\r\n\t\t\tleftBottomCorner = [bbox.Min[idx]*FOOT_TO_MM for idx in range(3)]\r\n\t\t\tcenter = []\r\n\t\t\tfor idx in range(3):\r\n\t\t\t\tcenter.append((rightUpperCorner[idx]+leftBottomCorner[idx])/2)\r\n\t\t\treturn center\r\n\t\telse:\r\n\t\t\t#print \"No Bounding box\"\r\n\t\t\treturn [0,0,0]\r\n\t\t\t\r\n\tdef convertUnitsTomm(self, value, unit):\r\n\t\tif DisplayUnitType.DUT_DECIMAL_INCHES == unit:\r\n\t\t\treturn value*25.4\r\n\t\telif DisplayUnitType.DUT_CENTIMETERS == unit:\r\n\t\t\treturn value*10\r\n\t\telif DisplayUnitType.DUT_DECIMAL_FEET == unit:\r\n\t\t\treturn value*304.8\r\n\t\telif DisplayUnitType.DUT_MILLIMETERS == unit:\r\n\t\t\treturn value\r\n\t\telif DisplayUnitType.DUT_METERS == unit:\r\n\t\t\treturn value*1000\r\n\t\tprint unit\r\n\t\treturn value\r\n\r\n\tdef GetMaterialInfo(self, mat):\r\n\t\tvalue = {}\r\n\t\tdef GetTextureInformation(texture_path, asset):\r\n\t\t\t\"\"\"\r\n\t\t\tGet texture information from unifiedBitMap\r\n\t\t\t\"\"\"\r\n\t\t\tvalue[\"path\"] = os.path.basename(texture_path)\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tif asset.FindByName(\"texture_RealWorldScaleX\") and asset.FindByName(\"texture_RealWorldScaleY\"):\r\n\t\t\t\tunitX = asset.FindByName(\"texture_RealWorldScaleX\").DisplayUnitType\r\n\t\t\t\tunitY = asset.FindByName(\"texture_RealWorldScaleY\").DisplayUnitType\r\n\t\t\t\tuScale = asset.FindByName(\"texture_RealWorldScaleX\").Value\r\n\t\t\t\tvScale = asset.FindByName(\"texture_RealWorldScaleY\").Value\r\n\t\t\t\t\r\n\t\t\t\tvalue[\"uScale\"] = self.convertUnitsTomm(uScale, unitX)\r\n\t\t\t\tvalue[\"vScale\"] = self.convertUnitsTomm(vScale, unitY)\r\n\t\t\t\t\r\n\t\t\telse:\r\n\t\t\t\tif asset.FindByName(\"texture_UScale\"):\r\n\t\t\t\t\tvalue[\"uScale\"] = asset.FindByName(\"texture_UScale\").Value\r\n\t\t\t\tif asset.FindByName(\"texture_VScale\"):\r\n\t\t\t\t\tvalue[\"vScale\"] = asset.FindByName(\"texture_VScale\").Value\r\n\t\t\tif asset.FindByName(\"texture_UOffset\"):\r\n\t\t\t\tvalue[\"uOffset\"] = asset.FindByName(\"texture_UOffset\").Value\r\n\t\t\tif  asset.FindByName(\"texture_VOffset\"):\r\n\t\t\t\tvalue[\"vOffset\"] = asset.FindByName(\"texture_VOffset\").Value\r\n\t\t\tif asset.FindByName(\"texture_WAngle\"):\r\n\t\t\t\tvalue[\"wAng\"] = asset.FindByName(\"texture_WAngle\").Value\r\n\t\t\r\n\t\tdef getparameterFromAsset(asset):\r\n\t\t\t\"\"\"\r\n\t\t\tUsed for nested Asset\r\n\t\t\t\"\"\"\r\n\t\t\tfor i in range(asset.Size):\r\n\t\t\t\tname = asset.Get(i).Name\r\n\t\t\t\tif name == \"unifiedbitmap_Bitmap\":\r\n\t\t\t\t\ttexture_path = asset.FindByName(\"unifiedbitmap_Bitmap\").Value\r\n\t\t\t\t\tif texture_path:\r\n\t\t\t\t\t\tGetTextureInformation(texture_path, asset)\r\n\t\t\t\t\t\treturn value\r\n\t\tdef getGlassMaterial(renderingAsset):\r\n\t\t\tGLAZINGCOLOR = [\"Clear\", \"Green\", \"Gray\",\"Blue\", \"Bluegreen\", \"Bronze\", \"Custom\"]\r\n\t\t\tcolorMap = renderingAsset.FindByName(\"glazing_transmittance_color\").Value\r\n\t\t\tglassColor = GLAZINGCOLOR[colorMap]\r\n\t\t\t\t\t\r\n\t\t\tif glassColor == \"Clear\":\r\n\t\t\t\tvalue[\"diffuseColor\"] = [0,0,0,0.2]\r\n\t\t\telif glassColor == \"Green\":\r\n\t\t\t\tvalue[\"diffuseColor\"] = [0,1,0,0.2]\r\n\t\t\telif glassColor == \"Gray\":\r\n\t\t\t\tvalue[\"diffuseColor\"] = [0.32, 0.32, 0.32,0.2]\r\n\t\t\telif glassColor == \"Blue\":\r\n\t\t\t\tvalue[\"diffuseColor\"] = [0, 0, 1,0.2]\r\n\t\t\telif glassColor == \"Bluegreen\":\r\n\t\t\t\tvalue[\"diffuseColor\"] = [0.05,0.59,0.73,0.2]\r\n\t\t\telif glassColor == \"Bronze\":\r\n\t\t\t\tvalue[\"diffuseColor\"] = [0.8, 0.5,0.2,0.2]\r\n\t\t\telse:\r\n\t\t\t\tcolorMap = renderingAsset.FindByName(\"glazing_transmittance_map\").GetValueAsDoubles()\r\n\t\t\t\tvalue[\"diffuseColor\"] = [ i for i in colorMap]\r\n\t\t\t\tvalue[\"diffuseColor\"].append(0.2)\r\n\t\t\t\t#print value[\"diffuseColor\"]\r\n\t\t\treturn value\r\n\t\t\r\n\t\tdef getConsistentColor(mat):\r\n\t\t\t\"\"\"\r\n\t\t\tInCase appearanceAsset is not present or renderingAsset is empty use consistentColor\r\n\t\t\t\"\"\"\r\n\t\t\tvalue['diffuseColor'] = [float(mat.Color.Red)/255, float(mat.Color.Green)/255, float(mat.Color.Blue)/255, 1 - float(mat.Transparency)/100]\r\n\t\t\tvalue['name'] = mat.Id.ToString()\r\n\t\t\treturn value\r\n\t\t\r\n\t\tappearanceAssetId = mat.AppearanceAssetId\r\n\t\r\n\t\r\n\t\tassetElem = self.doc.GetElement(appearanceAssetId)\r\n\t\tif not assetElem: \r\n\t\t\t# return consistent color\r\n\t\t\tvalue = getConsistentColor(mat)\r\n\t\t\treturn value \r\n\t\t#print assetElem.Name\r\n\t\t\r\n\t\trenderingAsset = assetElem.GetRenderingAsset()\r\n\t\t\r\n\t\tif renderingAsset.Size == 0:\r\n\t\t\trenderingAsset = getDefaultMaterial(renderingAsset.Name)\r\n\t\t\t\r\n\t\tvalue[\"name\"] = assetElem.Name\r\n\t\tproperty = renderingAsset.FindByName(\"localname\")\r\n\t\tclassName = mat.MaterialClass\r\n\t\t\r\n\t\tif property or ((not property) and className):\r\n\t\t\tif property:\r\n\t\t\t\tproperty = property.Value.ToString()\r\n\t\t\t\tvalue[\"type\"] = property\r\n\t\t\telse:\r\n\t\t\t\tvalue[\"type\"] = className\r\n\t\t\t# If material class is Glazing\r\n\t\t\tif property == \"Glazing\" or ((not property) and className == \"Glass\"):\r\n\t\t\t\t#print property, \"----\"\r\n\t\t\t\tGLAZINGCOLOR = [\"Clear\", \"Green\", \"Gray\",\"Blue\", \"Bluegreen\", \"Bronze\", \"Custom\"]\r\n\t\t\t\t\t\r\n\t\t\t\tcolorMap = renderingAsset.FindByName(\"glazing_transmittance_color\").Value\r\n\t\t\t\t\r\n\t\t\t\tglassColor = GLAZINGCOLOR[colorMap]\r\n\t\t\t\t\r\n\t\t\t\tif glassColor == \"Clear\":\r\n\t\t\t\t\tvalue[\"diffuseColor\"] = [0,0,0,0.2]\r\n\t\t\t\telif glassColor == \"Green\":\r\n\t\t\t\t\tvalue[\"diffuseColor\"] = [0,1,0,0.2]\r\n\t\t\t\telif glassColor == \"Gray\":\r\n\t\t\t\t\tvalue[\"diffuseColor\"] = [0.32, 0.32, 0.32,0.2]\r\n\t\t\t\telif glassColor == \"Blue\":\r\n\t\t\t\t\tvalue[\"diffuseColor\"] = [0, 0, 1,0.2]\r\n\t\t\t\telif glassColor == \"Bluegreen\":\r\n\t\t\t\t\tvalue[\"diffuseColor\"] = [0.05,0.59,0.73,0.2]\r\n\t\t\t\telif glassColor == \"Bronze\":\r\n\t\t\t\t\tvalue[\"diffuseColor\"] = [0.8, 0.5,0.2,0.2]\r\n\t\t\t\telse:\r\n\t\t\t\t\tcolorMap = renderingAsset.FindByName(\"glazing_transmittance_map\").GetValueAsDoubles()\r\n\t\t\t\t\tvalue[\"diffuseColor\"] = [ i for i in colorMap]\r\n\t\t\t\t\tvalue[\"diffuseColor\"].append(0.2)\r\n\t\t\t\t\t#print value[\"diffuseColor\"]\r\n\t\t\t\t#print value\r\n\t\t\t\treturn value\r\n\t\t\t\r\n\t\t\t\t\t\r\n\t\tfor i in range(renderingAsset.Size):\r\n\r\n\t\t\tname = renderingAsset.Get(i).Name\r\n\t\t\tif name == \"unifiedbitmap_Bitmap\":\r\n\t\t\t\ttexture_path = asset.FindByName(\"unifiedbitmap_Bitmap\").Value\r\n\t\t\t\tif texture_path:\r\n\t\t\t\t\tGetTextureInformation(texture_path, renderingAsset)\r\n\t\t\t\t\t#print value\t\t\r\n\t\t\tproperty = renderingAsset.FindByName(name)\r\n\t\t\t# diffuse => generic, glazing => glazing class\r\n\t\t\tisValidProperty = re.search(\"(?=(diffuse))\",property.Name.ToString() ) or re.search(r'(?=(color))',property.Name.ToString()) or re.search(r\"(?=(glazing))\", property.Name.ToString())\r\n\t\t\t\r\n\t\t\t# if property has connected properties check if texture is present\r\n\t\t\tif property.NumberOfConnectedProperties > 0 and property.Name.ToString() not in [\"common_Tint_color\"] and isValidProperty:\r\n\t\t\t \t\r\n\t\t\t \tif isinstance(property, AssetPropertyDoubleArray4d):\r\n\t\t\t \t\tvalue[\"diffuseColor\"] = [ i for i in property.GetValueAsDoubles()]\r\n\t\t\t \t\talpha = renderingAsset.FindByName(\"generic_transparency\")\r\n\t\t\t \t\tif alpha and alpha.Value != 0:\r\n\t\t\t \t\t\tvalue[\"diffuseColor\"][3] = float(1 - alpha.Value)\r\n\t\t\t \t\r\n\t\t\t\tgetparameterFromAsset(property.GetAllConnectedProperties()[0])\r\n\t\t\t\t\r\n\t\t\t# else get color property.\r\n\t\t\telif isinstance(property, AssetPropertyDoubleArray4d) and property.Name.ToString() not in [\"common_Tint_color\"] and isValidProperty :\r\n\t\t\t\tvalue[\"diffuseColor\"] = [ i for i in property.GetValueAsDoubles()]\r\n\t\t\t\talpha = renderingAsset.FindByName(\"generic_transparency\")\r\n\t\t\t \tif alpha and alpha.Value != 0:\r\n\t\t\t \t\tvalue[\"diffuseColor\"][3] = float(1 - alpha.Value)\r\n\t\t\r\n\t\treturn value\r\n\t\t\r\n\tdef handleColumns(self, element):\r\n\t\tnoOfFaces = 0\r\n\t\t\r\n\t\tdef getHeightFromBoundingBox(element):\r\n\t\t\tbbox = element.get_BoundingBox(view)\r\n\t\t\tif bbox :\r\n\t\t\t\trightUpperCorner = [bbox.Max[idx]*FOOT_TO_MM for idx in range(3)]\r\n\t\t\t\tleftBottomCorner = [bbox.Min[idx]*FOOT_TO_MM for idx in range(3)]\r\n\t\t\t\theight = rightUpperCorner[2] - leftBottomCorner[2]\r\n\t\t\t\treturn height\r\n\t\t\telse:\r\n\t\t\t\treturn 0\r\n\t\t\t\r\n\t\tdef handleSolid(solid, noOfFaces):\r\n\t\t\tcolumnBottomFace = []\r\n\t\t\tnormal = [0,0,0]\r\n\t\t\tfor f in solid.Faces:\r\n\t\t\t\tif (f.ComputeNormal(UV(0.5,0.5)).Z < 0):\r\n\t\t\t\t\tnormal =  [ f.ComputeNormal(UV(0.5,0.5))[i] for i in range(3) ]\r\n\t\t\t\t\tnoOfFaces += 1\r\n\t\t\t\t\t#if True: to get bottom face\r\n\t\t\t\t\tedges = f.GetEdgesAsCurveLoops()\r\n\t\t\t\t\tsortedCurveLoops = ExporterIFCUtils.SortCurveLoops(edges);\r\n\t\t\t\t\tif len(sortedCurveLoops) > 1:\r\n\t\t\t\t\t\tnoOfFaces += 1\r\n\t\t\t\t\tfor e in edges:\r\n\t\t\t\t\t\tfor cl in e.GetCurveLoopIterator():\r\n\t\t\t\t\t\t\ttry:\r\n\t\t\t\t\t\t\t\tif isinstance(cl, Arc):\r\n\t\t\t\t\t\t\t\t\tpoints = cl.Tessellate()\r\n\t\t\t\t\t\t\t\t\tfor point in points:\r\n\t\t\t\t\t\t\t\t\t\tcolumnBottomFace.append([point[idx]* FOOT_TO_MM for idx in range(3)])\r\n\t\t\t\t\t\t\t\telse:\r\n\t\t\t\t\t\t\t\t\tcolumnBottomFace.append([cl.GetEndPoint(0)[idx]* FOOT_TO_MM for idx in range(3)])\r\n\t\t\t\t\t\t\texcept Exception as e:\r\n\t\t\t\t\t\t\t\tprint e\r\n\t\t\t\t\tbreak\r\n\t\t\treturn columnBottomFace, noOfFaces, normal\r\n\t\t\t\t\t\t\r\n\t\t\t\t\r\n\t\topt = Options()\r\n\t\topt.View = view\r\n\t\tcolumnBottomVertices = []\r\n\t\tfaceNormal = [0,0,0]\r\n\t\ttry:\r\n\t\t\tfor geo in element.get_Geometry(opt):\r\n\t\t\t\tif isinstance(geo, Solid):\r\n\t\t\t\t\tbottomFace, noOfFaces,normal = handleSolid(geo, noOfFaces)\r\n\t\t\t\t\tif len(bottomFace) > 0:\r\n\t\t\t\t\t\tcolumnBottomVertices += bottomFace\r\n\t\t\t\t\t\tfaceNormal = normal\r\n\t\t\t\tif isinstance(geo, GeometryInstance):\r\n\t\t\t\t\tfor g in geo.GetInstanceGeometry():\r\n\t\t\t\t\t\tif isinstance(g, Solid):\r\n\t\t\t\t\t\t\tbottomFace, noOfFaces ,normal = handleSolid(g, noOfFaces)\r\n\t\t\t\t\t\t\tif len(bottomFace) > 0:\r\n\t\t\t\t\t\t\t\tcolumnBottomVertices += bottomFace\r\n\t\t\t\t\t\t\t\tfaceNormal = normal\r\n\t\t\t\t\t\t\t\r\n\t\texcept Exception as e:\r\n\t\t\tprint e, \"inside handle column\"\r\n\t\t\t\r\n\t\t\t\r\n\t\theight = 0\r\n\t\tif element.get_Parameter(BuiltInParameter.INSTANCE_LENGTH_PARAM):\r\n\t\t\theight = element.get_Parameter(BuiltInParameter.INSTANCE_LENGTH_PARAM).AsDouble()*FOOT_TO_MM\r\n\t\telif element.LookupParameter(\"Height\"):\r\n\t\t\theight = element.LookupParameter(\"Height\").AsDouble()*FOOT_TO_MM\r\n\t\t\t\r\n\t\tif height == 0:\r\n\t\t\theight = getHeightFromBoundingBox(element)\r\n\t\t\t\r\n\t\tmats = element.GetMaterialIds(False)\r\n\t\tvalue = None\r\n\t\tif len(mats) > 0:\r\n\t\t\tmatId = mats[0]\r\n\t\t\tmat = self.doc.GetElement(matId)\r\n\t\t\tvalue = self.GetMaterialInfo(mat)\r\n\t\t\t\r\n\t\t\t\t\r\n\t\treturn columnBottomVertices, height, value, noOfFaces, faceNormal\r\n\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\r\n\t\t\r\ncontext = myContextExport(doc)\r\n\r\nexporter = CustomExporter(doc, context)\r\n#exporter.IncludeFaces = False;\r\n\r\n# export the active view\r\ntry:\r\n\texporter.Export(view)\r\nexcept:\r\n\tprint \"Fail to export the model\"\r\n\r\nfamilyData = context.familyData\r\ndata = context.data\r\ncomponentsData = context.creationData\r\n\r\noutList = []\r\nmainList = []\r\nkeys = []\r\n\r\n\r\nfor k,v in data.items():\r\n\tkeys.append(k)\r\n\toutList.append(json.dumps(v, False, False))\r\nmainList.append(outList)\r\n\r\noutList = []\r\nfor k,v in familyData.items():\r\n\r\n\toutList.append(json.dumps(v,False, False))\r\nmainList.append(outList)\r\noutList = []\r\n\r\nfor k,v in componentsData.items():\r\n\toutList.append(json.dumps(v,False, False))\r\n\t\r\nmainList.append(outList)\r\noutList = []\r\n#print(keys)\r\n\t\r\n# Assign your output to the OUT variable.\r\nOUT = keys, mainList\r\n\r\n",
      "VariableInputPorts": true,
      "Id": "ec2d34d05b254cb88b72d648f9205582",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "0c554130b29044c1b997bf3b618f8148",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Load the Python Standard and DesignScript Libraries\r\nimport sys\r\nimport clr\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\nclr.AddReference(\"RevitServices\")\r\nimport RevitServices\r\nfrom RevitServices.Persistence import DocumentManager\r\n\r\n# The inputs to this node will be stored as a list in the IN variables.\r\n\r\n\r\n# Place your code below this line\r\ndoc = DocumentManager.Instance.CurrentDBDocument\r\n\r\n\r\n# Assign your output to the OUT variable.\r\nOUT = doc.Title",
      "VariableInputPorts": true,
      "Id": "73eead45035e4d678a8157e0b8c8b8db",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "e8397a0d975f4808bdd08fb5c101b7da",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# pipe_id = '\\\\\\\\.\\\\pipe\\\\'\r\n# pipe_name = 'snaptrudeDynamoPipe'\r\n\r\n# pipein = open(pipe_id + pipe_name, 'r')\r\n# stream_id = pipein.read(10) # 10 alpha numeric characters\r\n\r\nimport clr\r\n\r\n#Sets up new path to ironpython module Library\r\n#See https://docs.python.org/2/library/sys.html\r\nimport sys\r\nsys.path.append(\"C:\\Program Files (x86)\\IronPython 2.7\\Lib\")\r\n\r\nimport os\r\nimport json\r\n\r\napp_data_store = os.path.join(os.getenv('APPDATA'), 'snaptrude-manager', 'config.json')\r\nfile = None\r\n\r\n# print(app_data_store)\r\n\r\ntry:\r\n    file = open(app_data_store)\r\nexcept Exception as e:\r\n    print('File not found')\r\n    print(e)\r\n    OUT = \"\"\r\n    quit()\r\n\r\ndata = json.load(file)\r\nstream_id = data['streamId']\r\n\r\nfile.close()\r\n\r\nurl_store = os.path.join(os.getenv('APPDATA'), 'snaptrude-manager', 'urls.json')\r\nspeckle_url = 'https://speckle.snaptrude.com'\r\n\r\ntry:\r\n    file = open(url_store)\r\n    data = json.load(file)\r\n    speckle_url = data['speckleUrl']\r\nexcept Exception as e:\r\n    print(\"No urls file\")\r\n\r\nspeckle_url = speckle_url + '/streams/' + stream_id\r\n\r\nprint(speckle_url)\r\n\r\nOUT = speckle_url",
      "VariableInputPorts": true,
      "Id": "81e4b5bb7e464e68977c0a1ea616c2aa",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "96459d66a6b8445ab567dd0fc730d633",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    }
  ],
  "Connectors": [
    {
      "Start": "b04263e835d34938a5b41ad25298ad9b",
      "End": "b9c1a5131d2b4fb5a95e8f168831b475",
      "Id": "bfc7fdaab8644aa893fe94fa3deac254"
    },
    {
      "Start": "a7031732f2574aef8846ba620c2b3776",
      "End": "0f88859a66ec49918324b7de5fe24124",
      "Id": "abb42299d83a497db716293d8c470a6d"
    },
    {
      "Start": "cb2dcf9f9d694e1cbb3603c09249e7ae",
      "End": "fe988dbda3414f82821b524dd86670ea",
      "Id": "e336811a8724491380b62c0eb66b5444"
    },
    {
      "Start": "3111a6c16c9b4947981cd6a14bd92425",
      "End": "bdedc6db142647e9b3c69d6cc209eb5d",
      "Id": "26b1a13037234d4faa3cc3bf641ea680"
    },
    {
      "Start": "dbb7af273f7f410c95993996789a83bb",
      "End": "0dd7625158e84279a5ea380344f47756",
      "Id": "2d15cfa85c1148d085f9232fdec0a105"
    },
    {
      "Start": "f15d2cc7f4ba4124ab901e34e78d0534",
      "End": "433ee99011f643be9f1ed6aa8bb73fb4",
      "Id": "132bfa79de7344889a0ccf5b7a5af4cb"
    },
    {
      "Start": "a4429d5ecbb24b3f8cd32f745cb9c2cb",
      "End": "a3769d8fed0f4c6eb059004312ab48b7",
      "Id": "e5caab7ccdab4a898e7e821e32a154c5"
    },
    {
      "Start": "82c55af1bb1846b0bc739d7a36c1abfc",
      "End": "d90d660e970b49e78f8f130d9d9a6cfc",
      "Id": "98cc61b6921c4ffc8d7ce0761e15aefe"
    },
    {
      "Start": "1f131e0090b1458f95697d4e06a0f554",
      "End": "34c1310901e947eab309ee0d9ceec10e",
      "Id": "63e8c380664a4a63ace6113f975436b7"
    },
    {
      "Start": "0c554130b29044c1b997bf3b618f8148",
      "End": "f7d2fc7a6f434d15ad5e0803c275c0e9",
      "Id": "629a21d997794ecbb72f9faa5c69c59f"
    },
    {
      "Start": "e8397a0d975f4808bdd08fb5c101b7da",
      "End": "f42ed32e44ca4865b1515406ace6cc68",
      "Id": "1120701892474fd39e8f66d8cca1f7ff"
    },
    {
      "Start": "96459d66a6b8445ab567dd0fc730d633",
      "End": "4049266409394ba2a9d71ab3e975c85e",
      "Id": "93ceb4957b2d4b53a2b037f08f5f8d39"
    }
  ],
  "Dependencies": [],
  "Bindings": [],
  "View": {
    "Dynamo": {
      "ScaleFactor": 1.0,
      "HasRunWithoutCrash": true,
      "IsVisibleInDynamoLibrary": true,
      "Version": "2.0.4.12684",
      "RunType": "Manual",
      "RunPeriod": "1000"
    },
    "Camera": {
      "Name": "Background Preview",
      "EyeX": -17.0,
      "EyeY": 24.0,
      "EyeZ": 50.0,
      "LookX": 12.0,
      "LookY": -13.0,
      "LookZ": -58.0,
      "UpX": 0.0,
      "UpY": 1.0,
      "UpZ": 0.0
    },
    "NodeViews": [
      {
        "ShowGeometry": true,
        "Name": "Send",
        "Id": "cd3a8d153c0247118f51d2b9e06ca6e4",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1340.2007428951,
        "Y": 143.444641699235
      },
      {
        "ShowGeometry": true,
        "Name": "Wall Types",
        "Id": "1729f3d97f284a0db2b54ffa04bea4f6",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 442.660110877358,
        "Y": -361.313006724328
      },
      {
        "ShowGeometry": true,
        "Name": "Levels & Walls",
        "Id": "d1292d758bcb489fabe494a6610d081a",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 442.660110877358,
        "Y": 326.57686003658949
      },
      {
        "ShowGeometry": true,
        "Name": "Python Script",
        "Id": "ba4b121ae0e344e294fbf34704abc82d",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1060.60763067667,
        "Y": 143.444641699235
      },
      {
        "ShowGeometry": true,
        "Name": "Column types",
        "Id": "6a127115ea7045d68e1e1f59c52fb6b3",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 442.660110877358,
        "Y": -17.368073343869241
      },
      {
        "ShowGeometry": true,
        "Name": "Floor Types",
        "Id": "ae9eb79d70624a8595b36288727492f0",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 442.660110877358,
        "Y": -246.6646955975084
      },
      {
        "ShowGeometry": true,
        "Name": "Door Types",
        "Id": "bf48d77cdb9d48e08ca847a27e74e513",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 442.660110877358,
        "Y": 97.280237782950337
      },
      {
        "ShowGeometry": true,
        "Name": "Window Types",
        "Id": "ee98aea1194944b7bfc72fe0f1bafd4c",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 442.660110877358,
        "Y": 211.92854890976992
      },
      {
        "ShowGeometry": true,
        "Name": "Watch",
        "Id": "826ea47710e840fb94245682e24847c0",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1786.32166371513,
        "Y": 143.444641699235
      },
      {
        "ShowGeometry": true,
        "Name": "Ceiling Types",
        "Id": "6a513145708b48d6867c9286abd04402",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 442.660110877358,
        "Y": -132.01638447068882
      },
      {
        "ShowGeometry": true,
        "Name": "Revit Export",
        "Id": "ec2d34d05b254cb88b72d648f9205582",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 442.660110877358,
        "Y": 441.22517116340907
      },
      {
        "ShowGeometry": true,
        "Name": "Project Name",
        "Id": "73eead45035e4d678a8157e0b8c8b8db",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1060.6076306766729,
        "Y": 563.56640501770914
      },
      {
        "ShowGeometry": true,
        "Name": "Stream",
        "Id": "81e4b5bb7e464e68977c0a1ea616c2aa",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1060.6076306766729,
        "Y": 444.50552335847232
      }
    ],
    "Annotations": [],
    "X": 114.41967984904022,
    "Y": 337.97311631267615,
    "Zoom": 0.18852281276606417
  }
}